-### EDIT_CV widget view

- if @project.nil?
  - edit_auth = !@current_user.nil? && @current_user.system_role.name=='Administrator'
- else
  - edit_auth = !@current_user.nil? && (@current_user.has_role?('Data Manager',@project) || @current_user.has_role?('Principal Investigator',@project))
- url_api_key = @current_user.nil? || @current_user.api_key.blank? ? "" : "&api_key=#{@current_user.api_key}"

:javascript
  //dojoConfig = { parseOnLoad: false };
  console.log('JAVASCRIPT:LOADING!');
  dojo.require("dojox.grid.EnhancedGrid");
  dojo.require("dojox.grid.enhanced.plugins.NestedSorting");
  dojo.require("dojox.grid.enhanced.plugins.Filter");
  dojo.require("dojo.data.ItemFileReadStore");
  dojo.require("dijit.layout.TabContainer");
  dojo.require("dojox.grid.enhanced.plugins.IndirectSelection");
  dojo.require("dijit.form.Form");
  dojo.require("dijit.form.TextBox");
  dojo.require("dijit.form.DateTextBox");
  dojo.require("dijit.form.TimeTextBox");
  dojo.require("dijit.form.ValidationTextBox");
  dojo.require("dijit.form.SimpleTextarea"); 
  dojo.require("dijit.form.Textarea"); 
  dojo.require("dijit.form.Button");
  dojo.require("voeis.voeis_util");
  
  //#### GLOBALS
  
  var #{@cv_title2}_data = {};
  
  #{@cv_title2}_data.global = #{@global ? 'true' : 'false'};
  #{@cv_title2}_data.cv_title = "#{@cv_title}";
  #{@cv_title2}_data.cv_title2 = "#{@cv_title2}";
  #{@cv_title2}_data.global_post_url = "/#{@cv_title2cv}s";
  #{@cv_title2}_data.post_url = "#{@project.nil? ? '' : '/projects/'+@project.id.to_s}"+#{@cv_title2}_data.global_post_url;
  #{@cv_title2}_data.tab_loaded = false;
  
  //### [field, type(2)] without labels (LL)
  #{@cv_title2}_data.cv_fields = #{@cv_form.map{|x| [x[:field],x[:type].split('-')[-1]] unless x[:type][-2..-1]=='LL'}.compact.to_json};
  
  //#### DATA STORE
  #{@cv_title2}_data.cv_data = #{@cv_data.to_json};
  
  //for(var i=0;i<#{@tabId}_data.cv_data.length;i++)
  //  #{@tabId}_data.cv_data[i]['idx'] = i;
  #{@cv_title2}_data.cv_data_json = {
    identifier: 'id',
    label: '#{@cv_name}',
    items: #{@cv_title2}_data.cv_data };

  #{@cv_title2}_data.cv_store = new dojo.data.ItemFileWriteStore({
    data: #{@cv_title2}_data.cv_data_json
  });
  
  //#### COPY STORE-- for GLOBAL > LOCAL copy
  //#### ONLY LOCAL VerticaDatum/SpatialReference
  if(#{!@copy_data.nil?}) {
    #{@cv_title2}_data.copy_data = #{@copy_data.to_json};
    //for(var i=0;i<#{@tabId}_data.copy_data.length;i++)
    //  #{@tabId}_data.copy_data[i]['idx'] = i;
    #{@cv_title2}_data.copy_data_json = {
      identifier: 'id',
      label: '#{@cv_name}',
      items: #{@cv_title2}_data.copy_data };
    #{@cv_title2}_data.copy_store = new dojo.data.ItemFileWriteStore({
      data: #{@cv_title2}_data.copy_data_json
    });
  };
  
  
  //###############################
  
  var #{@cv_title2}_exec = {};
  
  //###############################
  
  
  //######################
  // ITEM VALUE toString w/ null
  function cleanString(val) {
    if(val==null) return '';
    return val.toString();
  };
  //######################
  // GRID DISPLAY FILTERS
  #{@cv_title2}_exec.Formatter = {
    trueFalse: function(value) {
      var checked_img = '<img src="/images/true.png" />';
      var blank_img = '<img src="/images/blank.gif" width="16" height="16" />';
      if(value) return checked_img;
      return blank_img;
    },
    dateTime: function(value) {
      if(value==null || value=='') return '-';
      // Format DateTime string
      var d = new Date(value);
      //var fmt = d.getMonth()+'/'+d.getFullYear()
      return dojo.date.locale.format(d,{datePattern:"yyyy-MM-dd", timePattern:"HH:mm:ss"});
    },
    controls: function(item) {
      if(item==null || item.id==null) return '-';
      //return 'TESTING--'+item[cv_name].toString();
      var id = item.id[0];
      var id = parseInt(item.id.toString());
      //var idx = item.idx[0];
      var idx = item._0;
      var name = item['#{@cv_name}'].toString();
      //var hist_icon = '<img src="/images/icons/hist-icon16t.png" alt="history icon" title="HISTORY" />';
      //var delete_icon = '<img src="/images/icons/false.png" alt="delete icon" title="DELETE!" />';
      var hist_icon = '<img src="/images/icons/hist-icon16t.png" alt="history icon" title="HISTORY" style="margin:0;padding:0;height:16px;" />';
      var edit_icon = '<img src="/images/icons/edit.png" alt="history icon" title="EDIT" style="margin:0;padding:0;height:16px;" />';
      var delete_icon = '<img src="/images/icons/false.png" alt="delete icon" title="DELETE!" style="margin:0;padding:0;height:16px;" />';
      //var hist_link = '<a href="javascript:" onclick="alert(\'HISTORY COMING SOON! --\'+'+id+');return false;">'+hist_icon+'</a>\n';
      //var hist_link = '<a href="javascript:" onclick="confirm_now(\'HISTORY ON TERM: '+item[cv_name].toString()+'\\nCOMING SOON!\');return false;">'+hist_icon+'</a>\n';
      //var hist_link = '<a href="'+post_url+'/versions/?id='+id+'" onclick="window.open(this.href, \'HISTORY\', \'width=950,height=550\');return false;">'+hist_icon+'</a>\n';
      var hist_link = '<a href="javascript:" onclick="#{@cv_title2}_exec.cv_history('+id+',\''+name+'\');return false;">'+hist_icon+'</a>\n';
      var edit_link = '<a href="javascript:" onclick="#{@cv_title2}_exec.cv_pop_edit('+id+');return false;">'+edit_icon+'</a>\n';
      var delete_link = '<a href="javascript:" onclick="#{@cv_title2}_exec.cv_delete('+idx+');return false;">'+delete_icon+'</a>\n';
      var spaces = '&nbsp;';
      if(item.used[0]) return spaces+edit_link+spaces+hist_link;
      //return spaces+hist_link+spaces+delete_link;
      return spaces+edit_link+spaces+hist_link+spaces+delete_link;
    }
  };
  
  
  //###############################
  // UPDATE GRID ITEM COUNT
  #{@cv_title2}_exec.cv_update = function() {
    //console.log('CV_UPDATE NOW!!');
    var cv_store = #{@cv_title2}_data.cv_store;
    var copy_store = #{@cv_title2}_data.copy_store;
    var cv_count = cv_store._arrayOfAllItems.length.toString();
    console.log('CV_UPDATE: '+cv_count);
    $('##{@cv_title2}-cv-count').text(cv_count);
  };
  //###############################
  // CREATE NEW ITEM IN DOJO STORE
  #{@cv_title2}_exec.cv_store_new = function(item0,store) {
    var new_store = store || #{@cv_title2}_data.cv_store;
    //console.log('STORE_NEW:',item0,item);
    $('##{@tabId}_cv_empty').hide();
    $('##{@tabId}_cv_main').show();
    #{@cv_title2}_data.cv_management_grid.update();
    var item = #{@cv_title2}_exec.cv_data_filter(item0)
    item['used'] = false;
    console.log('STORE_NEW:',item0,item,new_store);
    datastore.new_upd(item,new_store);
    //update selects in forms
    $('select.#{@cv_title2}_select').append($("<option></option>").attr("value",item0['#{@cv_name}']).text(item0['#{@cv_name}']));
    if(window.update_select_element) {
      $(window.update_select_element).val(item0['#{@cv_name}']);
      window.update_select_element = false;
    };
    #{@cv_title2}_exec.cv_update();
  };
  //###############################
  // UPDATE ITEM IN DOJO STORE
  #{@cv_title2}_exec.cv_store_upd = function(dat,store) {
    var upd_store = store || #{@cv_title2}_data.cv_store;
    datastore.update(dat,upd_store);
  };
  
  //###############################
  //### OPEN HISTORY
  #{@cv_title2}_exec.cv_history = function(id,name) {
    var hist_url = #{@cv_title2}_data.post_url+'/versions/?api_key=#{@current_user.api_key}&id='+id
    var hist_id = "#{@cv_title2}_"+id+"_history";
    var hist_title = "Hist: "+name+" ["+id+"]";
    if(#{@cv_title2}_data.tab_loaded) {
      var hist_callback = function(){
        if(window.loaded) window.loaded();
        //resize History tabContainer
        initTabs();
      };
      var close_callback = function(){ #{@cv_title2}_exec.cleanup(); };
      dojo.publish('voeis/project/openTab',[hist_url,hist_id,hist_title,hist_callback,close_callback,'#{@tabId}_tabs']);
    } else {
      window.open(hist_url, hist_title, 'width=950,height=550');
    };
  };
  //###############################
  // POP OPEN EDIT DIALOG
  #{@cv_title2}_exec.cv_pop_edit = function(item_id) {
    console.log('POP EDIT #{@tabId}:',item_id);
    var item = datastore.get_raw(item_id, #{@cv_title2}_data.cv_store);
    #{@cv_title2}_exec.cv_datum_edit(item);
  };
  //###############################
  // COPY GLOBAL ITEMS (TERMS) TO LOCAL
  #{@cv_title2}_exec.copy_global_all = function() {
    var global_items = datastore.fetch({#{@cv_name}: '*'}, #{@cv_title2}_data.copy_store);
    var gcount = global_items.length;
    console.log('COPY GLOBAL ALL: '+gcount);
    if(global_items.length==0) return;
    var text = 'Are you sure you want to copy ALL '+gcount+' GLOBAL #{@cv_name}?';
    confirmDialog('Please confirm &mdash;', text, 
      function(yes) {
        console.log('CONFIRM:',yes);
        if(yes) {
          //DO COPY ALL
          for(var i=0; i<global_items.length; i++) {
            var item = global_items[i];
            var items = datastore.fetch({#{@cv_name}: item['#{@cv_name}'].toString()}, #{@cv_title2}_data.cv_store);
            console.log('COPY GLOBAL- ITEMS COUNT: '+items.length);
            if(!items.length) {
              //DO COPY --don't have this one
              delete item.id;   //### DON'T KEEP ID -NO SYNC NEW
              item['provenance_comment'] = 'Copied from GLOBAL';
              #{@cv_title2}_exec.cv_post_local(item, function(){
                console.log('COPY GLOBAL:', item);
                //REFRESH LOCAL GRID!
                if (i+1==global_items.length)
                  dijit.byId('#{@cv_title2}_data.cv_management_grid').setQuery({id: '*'});
              });
            };
          };
          //SELECT LOCAL PANE
          var tabs = dijit.byId('#{@tabId}_tabs');
          var pane = dijit.byId('manage_#{@tabId}');
          tabs.selectChild(pane);
          //REFRESH LOCAL GRID!
          dijit.byId('#{@cv_title2}_data.cv_management_grid').setQuery({id: '*'});
          #{@cv_title2}_exec.cv_update();
        };
      }, 
      {buttonOk: 'YES', buttonCancel: 'NO'});
  };
  #{@cv_title2}_exec.copy_global = function() {
    var global_items = global_grid.selection.getSelected();
    console.log('COPY GLOBAL (items): '+global_items.length);
    if(global_items.length==0) return;
    for(var i=0; i<global_items.length; i++) {
      var item = global_items[i];
      var items = datastore.fetch({#{@cv_name}: item['#{@cv_name}'].toString()}, #{@cv_title2}_data.cv_store);
      delete item.id;   //### DON'T KEEP ID -NO SYNC NEW
      item['provenance_comment'] = 'Copied from GLOBAL';
      if(items.length) {
        var text = items.length.toString()+' similar #{@cv_name}(s) already exist(s)-- are you sure you want another?';
        confirmDialog('Please confirm &mdash;', text, 
          function(yes) {
            console.log('CONFIRM:',yes);
            if(yes) {
              //DO COPY
              #{@cv_title2}_exec.cv_post_local(item, function(){
                //REFRESH LOCAL GRID!
                if (i+1==global_items.length)
                  dijit.byId('#{@cv_title2}_data.cv_management_grid').setQuery({id: '*'});
              });
            };
          }, 
          {buttonOk: 'YES', buttonCancel: 'NO'});
      } else {
        //DO COPY
        #{@cv_title2}_exec.cv_post_local(item);
      };
    };
    //SELECT LOCAL PANE
    var tabs = dijit.byId('#{@tabId}_tabs');
    var pane = dijit.byId('manage_#{@tabId}');
    tabs.selectChild(pane);
    //REFRESH LOCAL GRID!
    dijit.byId('#{@cv_title2}_data.cv_management_grid').setQuery({id: '*'});
    #{@cv_title2}_exec.cv_update();
  };
  
  //###############################
  //######################################
  // GLOBAL: PROCESS STORE NEW
  // LOCAL: POST TO LOCAL / PROCESS STORE
  #{@cv_title2}_exec.cv_post_local = function(data0, call_back) {
    if(#{@cv_title2}_data.global)
      //GLOBAL
      #{@cv_title2}_exec.cv_store_new(data0);
    else {
      //LOCAL
      var data = #{@cv_title2}_exec.cv_data_clean(data0);
      console.log('POST-LOCAL-RAW:',data0);
      console.log('POST-LOCAL:',data);
      $.ajax({
        type: 'POST',
        url: "#{@project.nil? ? '' : '/projects/'+@project.id}"+#{@cv_title2}_data.global_post_url+'.json?api_key=#{@current_user.api_key}',
        data: data,
        success: function(dat) {
          console.log('POSTED:', data0, data, dat);
          data0.id = dat.id;
          #{@cv_title2}_exec.cv_store_new(data0);
          if(call_back) call_back();
        },
        dataType: 'json'
      });
      return true;
    };
    #{@cv_title2}_exec.cv_update();
  };
  
  //###############################
  // SAVE ITEM
  #{@cv_title2}_exec.cv_save = function(id, item, call_back) {
    var cv_id = parseInt(id);
    var data = {#{@cv_title2cv}: item};
    if(cv_id) {
      //UPDATE (id>0)
      var post_type = 'PUT';
      var post_result = #{@cv_title2}_exec.cv_store_upd;
      var post_url = #{@cv_title2}_data.post_url+'/'+cv_id+'.json?api_key=#{@current_user.api_key}';
    } else {
      //NEW (id=0)
      var post_type = 'POST';
      //REMOVED GLOBAL SAVE ON NEW!!
      //var post_result = #{@cv_title2}_exec.cv_post_local;
      //var post_url = #{@cv_title2}_data.global_post_url+'.json?api_key=#{@current_user.api_key}';
      var post_result = #{@cv_title2}_exec.cv_store_new;
      var post_url = #{@cv_title2}_data.post_url+'.json?api_key=#{@current_user.api_key}';
      delete data.id;
      delete data.#{@cv_title2cv}.id;
    };
    console.log('POST:',data);
    console.log(post_type+' TO: '+post_url);
    //AJAX POST/PUT
    $.ajax({
      type: post_type,
      url: post_url,
      data: data,
      success: function(dat) {
        post_result(dat);
        if(call_back) call_back();
      },
      dataType: 'json'
    });
  };
  
  //###############################
  //### DELETE ITEM
  #{@cv_title2}_exec.cv_delete = function(item_idx, call_back) {
    console.log('DELETE?',item_idx);
    var item = #{@cv_title2}_data.cv_data[item_idx];
    //var confirm = window.confirm('Are you quite sure you want to\n DELETE this #{@cv_title}?');
    //var confirm = confirm_now('Are you quite sure you want to\n DELETE this #{@cv_title}?');
    var text = 'Are you quite sure you want to\n DELETE this #{@cv_title}?';
    confirmDialog('Please confirm &mdash;', text, 
      function(yes) {
        console.log('CONFIRM:',yes);
        if(yes) {
          //DELETE
          console.log('DELETE:',item);
          //return;     //TESTING
          var cv_id = item.id;
          var cv_idx = item._0;
          //AJAX DELETE
          $.ajax({
            type: 'DELETE',
            url: #{@cv_title2}_data.post_url+'/'+cv_id+'.json?api_key=#{@current_user.api_key}',
            data: {},
            dataType: 'json',
            success: function(result) {
              var errs = result.errors;
              if(errs && errs.length) {
                console.log('FAILED ERRORS:\n'+errs.join('/n'));
              } else {
                console.log('DELETED!');
                //var item = cv_data[cv_idx];
                datastore.delete(item,#{@cv_title2}_data.cv_store);
                if(#{!@copy_data.nil?})
                  #{@cv_title2}_exec.cv_store_new(item,#{@cv_title2}_data.copy_store);
                if(call_back) call_back();
              };
              #{@cv_title2}_exec.cv_update();
          }});
        };
        //#{@tabId}_cv_dialog_box.hide();
      }, 
      {buttonOk: 'YES', buttonCancel: 'Cancel'});
  };
  
  //######################################
  // SAVE CALLBACK for ITEM ROLLBACK
  //function cv_item_restore0(item, call_back) {
  #{@cv_title2}_exec.cv_item_restore = function(item, call_back) {
    var cv_id = item.id.toString();
    console.log('CV-ROLLBACK-- #{@cv_title2}:',cv_id);
    var item0 = #{@cv_title2}_exec.cv_data_filter(item);
    item0.provenance_comment = item['provenance_comment'];
    #{@cv_title2}_exec.cv_save(parseInt(cv_id), item0, function(){
      var hist_id = "#{@cv_title2}_"+cv_id+"_history";
      refreshTab(hist_id);
    });
    
    // OPEN SAVE FORM... 
    //var cv_item = cv_store_get(item.id);
    //item['idx'] = cv_item.idx;
    //cv_datum_upd(item);
  };
  
  
  //######################################
  // CLEAN & FORMAT DATA for SAVE
  #{@cv_title2}_exec.cv_data_clean = function(data0) {
    return {#{@cv_title2cv}:#{@cv_title2}_exec.cv_data_filter(data0)};
  };
  // REMOVE ANY UNWANTED STUFF & DENULLIFY for SAVE
  #{@cv_title2}_exec.cv_data_filter = function(data0) {
    var cv_id = parseInt(data0['id']);
    var form = #{@cv_title2}_form;
    var fields = #{@cv_title2}_data.cv_fields;
    var data = {};
    for(var i=0;i<fields.length;i++) {
      var fname = fields[i][0].toString();
      if(data0.hasOwnProperty(fname)) {
        if(fields[i][1][0]=='X')
          continue;
        else if(fields[i][1][0]=='B')
          data[fname] = data0[fname] ? true : false;
        else if(fields[i][1][0]=='I')
          data[fname] = parseInt(data0[fname]);
        else if(fields[i][1][0]=='N')
          data[fname] = parseInt(data0[fname]);
        else if(fields[i][1][0]=='F')
          data[fname] = parseFloat(data0[fname]);
        else
          data[fname] = cleanString(data0[fname]);
      };
    };
    if(cv_id) data.id = cv_id;
    if(data0.hasOwnProperty('provenance_comment') && data0.provenance_comment)
      data['provenance_comment'] = cleanString(data0.provenance_comment);
    return data;
  };
  
  //######################################
  // GET DIALOG FORM WIDGET
  #{@cv_title2}_exec.cv_form_widget = function(fname, checkbox, value) {
    //widg = dijit.byId('#{@cv_title2}_'+fname);
    //if(!widg) widg = dojo.byId('#{@cv_title2}_'+fname);
    //widg.set('checked', false);
    //if(widg.set) widg.set('value', '');
    //else widg.value = '';
    //if(widg.set) widg.set('value', '');
    //else widg.value = '';
    var widg = $('##{@cv_title2}_'+fname);
    if (value==undefined) {
      if (widg)
        if (checkbox)
          return widg.attr('checked') ? true : false;
        else
          return widg.val();
      return '';
    } else {
      if (checkbox)
        widg.attr('checked', value ? 'checked' : false);
      else
        widg.val(value);
      return widg;
    };
  };
  //######################################
  // CLEAR DIALOG FORM
  #{@cv_title2}_exec.cv_form_clear = function() {
    var form = #{@cv_title2}_form;
    var fields = #{@cv_title2}_data.cv_fields;
    for(var i=0;i<fields.length;i++) {
      var fname = fields[i][0].toString();
      if(fields[i][1].slice(1)=='CK')
        #{@cv_title2}_exec.cv_form_widget(fname, true, false);
      else
        #{@cv_title2}_exec.cv_form_widget(fname, false, '');
    };
    //var widg = dojo.byId('#{@cv_title2}_id');
    //if(widg) widg.value = '0';
    #{@cv_title2}_exec.cv_form_widget('id', false, '0');
    // RESET GLOBAL SELECT
    $('##{@tabId}_global_select').val('-');
    // VALIDATE FORM
    form.validate();
  };
  //######################################
  // POPULATE DIALOG FORM
  #{@cv_title2}_exec.cv_form_populate = function(cv_item) {
    console.log('POPULATE:',cv_item);
    var form = #{@cv_title2}_form;
    var fields = #{@cv_title2}_data.cv_fields;
    for(var i=0;i<fields.length;i++) {
      var fname = fields[i][0].toString();
      if(cv_item.hasOwnProperty(fname))
        if(fields[i][1].slice(1)=='CK')
          #{@cv_title2}_exec.cv_form_widget(fname, true, cv_item[fname][0]? 'checked' : false);
        else
          #{@cv_title2}_exec.cv_form_widget(fname, false, cv_item[fname].toString());
    };
    #{@cv_title2}_exec.cv_form_widget('provenance_comment', false, '');
    // RESET GLOBAL SELECT
    $('##{@tabId}_global_select').val('-');
    // VALIDATE FORM
    form.validate();
  };
  //######################################
  // FETCH DIALOG FORM DATA
  #{@cv_title2}_exec.cv_form_fetch = function() {
    console.log('FORM-FETCH');
    var form = #{@cv_title2}_form;
    //var elems = form.domNode.elements;
    //var id = elems['id'] ? parseInt(elems['id'].value) : 0;
    var cv_id = dojo.byId('#{@cv_title2}_id');
    var id = cv_id ? parseInt(cv_id.value) : 0;
    var fields = #{@cv_title2}_data.cv_fields;
    var data = {};
    for(var i=0;i<fields.length;i++) {
      var fname = fields[i][0].toString();
      //##### SKIP X fields!
      if(fields[i][1][0]!='X')
        if(fields[i][1].slice(1)=='CK')
          data[fname] = #{@cv_title2}_exec.cv_form_widget(fname, true);
        else
          data[fname] = #{@cv_title2}_exec.cv_form_widget(fname, false);
    };
    //##### ID>0: NOT NEW (UPDATE)
    if(id) {
      data['id'] = id;
      data['provenance_comment'] = #{@cv_title2}_exec.cv_form_widget('provenance_comment', true);
    };
    return data;
  };
  
  
  //######################################
  // OPEN EDIT DIALOG
  #{@cv_title2}_exec.cv_datum_edit = function(item) {
    console.log('EDIT #{@tabId}:',item);
    delete item.provenance_comment;
    #{@tabId}_cv_dialog_box.set('title', #{@cv_title2}_data.cv_title);
    #{@cv_title2}_exec.cv_form_populate(item);
    $('##{@cv_title2}_form #cv_prov_com').show();
    #{@tabId}_cv_dialog_box.show();
  };
  // OPEN NEW DIALOG
  #{@cv_title2}_exec.cv_datum_new = function() {
    console.log('NEW #{@tabId}');
    #{@tabId}_cv_dialog_box.set('title', 'NEW '+#{@cv_title2}_data.cv_title);
    #{@cv_title2}_exec.cv_form_clear();
    $('##{@cv_title2}_form #cv_prov_com').hide();
    #{@tabId}_cv_dialog_box.show();
  };
  
  // CLEAN-UP FOR CLOSING
  #{@cv_title2}_exec.cleanup = function() {
    console.log('CLEANUP: #{@tabId}');
    #{@tabId}_tabs.destroyRecursive(false);
    #{@tabId}_manage.destroyRecursive(false);
    dijit.byId('copytab_#{@tabId}').destroyRecursive(false);
    #{@tabId}_cv_management.destroyRecursive(false);
    #{@tabId}_cv_dialog_box.destroyRecursive(false);
    #{@tabId}_copy_dialog_box.destroyRecursive(false);
    delete #{@cv_title2}_data;
    delete #{@cv_title2}_exec;
  };
  
  
  //######################################
  //##### LOADED! #####
  function loaded(){
    #{@tabId}_tab_loaded = true;
  };
  
  //##### PAGE LOADED #####
  $(window).ready(function(){ 
    console.log('DONE LOADING!!');
    #{@tabId}_tab_loaded = false;
    //#{@cv_title2}_data.cv_management_grid.startup();
    
  });

  //RESIZE CV-pane tabs
  #{@cv_title2}_exec.resize = function() {
    resizeTabs('#{@tabId}_tabs',80,'95%');
  };
  
  //##### INIT PAGE #####
  //ON-TAB-LOAD-DONE!
  function initPage() {
    console.log('initPage: NOW!!');
    #{@cv_title2}_data.tab_loaded = true;
    #{@cv_title2}_data.cv_management_grid.startup();
    
    //RESIZE TABS STUFF
    global_resize['#{@cv_title2}'] = #{@cv_title2}_exec.resize;
    #{@cv_title2}_exec.resize();
    
    //PANE--
    var pane = dijit.byId('#{@tabId}');
    if(pane)
      //ON-CLOSE STUFF
      pane.connect(pane, "onClose", function(){
       //var this_pane = this;
       //this_pane.
       #{@cv_title2}_exec.cleanup();
       delete global_resize['#{@cv_title2}'];
      });
    
    //EDIT TAB CLICK-OVERRIDE
    var tabs = dijit.byId('#{@tabId}_tabs');
    var cur_pane = tabs.selectedChildWidget;
    var newpane = dijit.byId('#{@tabId}_newtab');
    var newclick = newpane.controlButton;
    newclick.onClick = function(mouse_evt) {
      var cur_pane = tabs.selectedChildWidget;
      console.log('CV-NEW TABclick!!',cur_pane.id);
      cur_pane.controlButton.focus();
      #{@cv_title2}_exec.cv_datum_new()
      
    };
    //dojo.connect(newclick, "_onClick", function(item,node,evt){
     //evt.preventDefault();
     //console.log('CV-NEW TABclick!!',item,node,evt);
     //#{@cv_title2}_exec.cv_datum_new()
     
     //var new_pane = this;
     //var tabs = dijit.byId('#{@tabId}_tabs');
     //var cur_pane = tabs.selectedChildWidget;
     //console.log('CV-NEW2: onShow:',cur_pane.id);
     //tabs.selectChild(cur_pane);
     //cur_pane.controlButton.focus();
    //});
    
  };
  


-#################################

-################# EDITING DIALOG

%div{:id=>"#{@tabId}_cv_dialog_box", :dojoType=>"dijit.Dialog", :jsId=>"#{@tabId}_cv_dialog_box", :title=>"#{@cv_title}", :style=>"width:400px;"}
  %form(id="#{@cv_title2}_form" jsId="#{@cv_title2}_form" dojoType="dijit.form.Form" method="post")
    - cv_ta_style = 'width:98%!important;line-height:16px!important;'
    - cv_ta_rows = "3"
    -### GLOBAL TERMS SELECT
    - if !@copy_data.nil?
      - opts_global = "<option value='-'>- GLOBAL TERMS -</option>\n"
      - @copy_data.each do |row|
        - opts_global += "<option value='#{row[@cv_id]}'>#{row[@cv_name]}</option>\n"
      = select_tag("#{@tabId}_global_select", (opts_global).html_safe)
      %br
      %br
    - @cv_form.each do |cvinput|
      - cvdelim = cvinput[:type].split('-')
      - cvtype = cvdelim[-1]
      - if cvdelim.length>1 && !cvdelim[0].blank?
        -#= cvdelim
        - cvdelim = cvdelim[0]
        = (@delims[cvdelim[-1].to_sym] * (cvdelim[0..-2].blank? ? 1 : cvdelim[0..-2].to_i)).html_safe
      -# dojotype = cvtype[:dojo].blank? ? '' : 'dojoType=%s'% cvtype[:dojo]
      -# formtype = cvtype[:type].blank? ? '' : 'type=%s'% cvtype[:type]
      - if cvtype=='LL'
        %label{:style=>"#{cvinput[:style]}"}
          = cvinput[:field]
      - else
        - cvstyle = cvinput[:style]
        - if cvtype[1..2]=='TA'
          - cvstyle = cv_ta_style+cvstyle
          - ta_rows = cv_ta_rows
        - cvtype = @types[cvtype[1..-1].to_sym]
        - if !cvtype.nil?
          %input(id="#{@cv_title2+'_'+cvinput[:field]}" jsId="#{@cv_title2+'_'+cvinput[:field]}" name="#{cvinput[:field]}" 
                  dojoType="#{cvtype[:dojo]}" type="#{cvtype[:type]}" required="#{cvinput[:required]}" style="#{cvstyle}" 
                  rows="#{ta_rows.nil? ? '' : ta_rows}")
      -#%input(name="source_id" type="#{cvtype[:type]}" dojoType="#{cvtype[:dojo]}" required="#{cvinput[:required]}")
    %br{:style=>'float:none; clear:both;'}
    
    #cv_prov_com{:style=>"display:none;"}
      %br
      %label Provenance Comment
      %br
      %input(id="#{@cv_title2}_provenance_comment" jsId="#{@cv_title2}_provenance_comment" name="provenance_comment" 
              dojoType="dijit.form.SimpleTextarea" rows="#{cv_ta_rows}" style="#{cv_ta_style}")
    
    -#%input(name="source_notes" dojoType="dijit.form.SimpleTextarea" id="site_source_notes" rows="5" 
    -#      style="width:98%!important;line-height:16px!important;")
    -#%input(name="lab_organization" dojoType="dijit_ext.ValidationTextarea" id="var_lab_organization" required="true" rows="5" 
    -#      style="width:98%!important;line-height:16px!important;")
    
    %br{:style=>'float:none; clear:both;'}
    %button{:dojoType=>"dijit.form.Button", :title=>'Create'}
      Save #{@cv_title}
      %script{:type=>"dojo/method", :event=>"startup"}
        :plain
          // set initial state
          this.attr("disabled", !#{@cv_title2}_form.isValid());
          //### ON-CHANGE
          this.connect(#{@cv_title2}_form, "onValidStateChange", function(state){
            this.attr("disabled", !state);
          });
          //### GLOBAL SELECT ON-CHANGE
          $("##{@tabId}_global_select").change(function(e){
            console.log('GLOBAL-SELECT-CHANGE:',this.value);
            var store = #{@cv_title2}_data.copy_store;
            var global = datastore.get(this.value,store);
            delete global.id;
            #{@cv_title2}_exec.cv_form_populate(global);
          });
          //MAKE COPY GLOBAL
          #{@tabId}_cv_dialog_box.global_copy = function(item) {
            //DO COPY
            delete item.id;   //### DON'T KEEP ID -NO SYNC NEW
            #{@cv_title2}_exec.cv_post_local(item, function(){
              //var copy_idx = parseInt(cv_idx.slice(1));
              //var del_item = #{@cv_title2}_data.copy_data[copy_idx];
              //datastore.delete(cv_id,#{@cv_title2}_data.copy_store);
              tabs = dijit.byId('#{@tabId}_tabs');
              pane = dijit.byId('manage_#{@tabId}');
              tabs.selectChild(pane);
              //REFRESH GRID!
              grid = dijit.byId('#{@cv_title2}_data.cv_management_grid');
              grid.setQuery({id: '*'});
              #{@tabId}_cv_dialog_box.hide();
            });
          };
          //### ON-CLICK: SAVE
          this.connect(this, "onClick", function(){
            var form = #{@cv_title2}_form.domNode;
            var cv_id = dojo.byId('#{@cv_title2}_id');
            cv_id = cv_id ? parseInt(cv_id.value) : 0;
            var item = #{@cv_title2}_exec.cv_form_fetch();
            console.log('POST:',item);
            var items = datastore.fetch({#{@cv_name}: item['#{@cv_name}'].toString()}, #{@cv_title2}_data.cv_store);
            if(items.length) {
              var text = items.length.toString()+' similar #{@cv_name}(s) already exist(s)-- are you sure you want another?';
              confirmDialog('Please confirm &mdash;', text, 
                function(yes) {
                  console.log('CONFIRM:',yes);
                  if(yes) {
                    //DO SAVE
                    #{@cv_title2}_exec.cv_save(cv_id, item, function(){
                      #{@tabId}_cv_dialog_box.hide();
                    });
                  };
                }, 
                {buttonOk: 'YES', buttonCancel: 'NO'});
            } else {
              //DO SAVE
              #{@cv_title2}_exec.cv_save(cv_id, item, function(){
                #{@tabId}_cv_dialog_box.hide();
              });
            };
          });
    &nbsp;&nbsp;
    %button{:dojoType=>"dijit.form.Button", :title=>'Cancel', :onClick=>"#{@tabId}_cv_dialog_box.hide();return false;"} Cancel


-################# COPY GLOBAL DIALOG

-#- if !@copy_data.nil? && false
-#  %div{:id=>"#{@tabId}_copy_dialog_box", :dojoType=>"dijit.Dialog", :jsId=>"#{@tabId}_copy_dialog_box", :title=>"#{@cv_title}: Copy Global", 
-#        :style=>"width:760px;"}
-#    * click an entry to save a copy from these GLOBAL #{@cv_title} entries
-#    %table{:dojoType=>"dojox.grid.EnhancedGrid", :store=>"#{@cv_title2}_data.copy_store", 
-#            :plugins=> "{filter:true}",  
-#            :clientSort=>"true", 
-#            :sortInfo=>"2",
-#            :style=>"width:100%;height:320px;margin:0;padding:0;border:#E3EBF2 2px solid;"}
-#      %script{:type=>"dojo/method", :event=>"onSelected", :args=>"idx"}
-#        :plain
-#          //SELECT GLOBAL CV TERM
-#          var form = #{@cv_title2}_form.domNode;
-#          var item = this.getItem(idx);
-#          this.selection.clear();
-#          var col = this.layout.cells[1];
-#          this.focus.setFocusCell(col,idx);
-#          #{@tabId}_copy_dialog_box.hide();
-#          #{@cv_title2}_exec.cv_form_populate(item);
-#          $('##{@cv_title2}_form #cv_prov_com').hide();
-#          //$('##{@cv_title2}_idx').val('#'+item.idx);
-#          var cv_idx = dojo.byId('#{@cv_title2}_idx');
-#          if(cv_idx) cv_idx.value = '#'+item._0;
-#          #{@tabId}_cv_dialog_box.set('title', 'NEW '+#{@cv_title2}_data.cv_title);
-#          #{@tabId}_cv_dialog_box.show();
-#      %thead
-#        %tr
-#          - @copy_columns.each do |col|
-#            %th{:field=>"#{col[:field]}", :filterable=>"#{col[:filterable]}", :width=>"#{col[:width]}", :style=>"#{col[:style]}", 
-#                :formatter=>"#{col[:formatter].blank? ? '' : @cv_title2+'_exec.Formatter.'+col[:formatter]}"} #{col[:label]}


-################# MAIN

-#%strong
-#  #{(@project.nil? ? 'GLOBAL ' : 'PROJECT ')+@cv_title.upcase} ENTRIES (#{@cv_data.length})
-#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-#-#= link_to('CREATE NEW', 'javascript:', :class=>'icon icon-add', :onclick=>"dojo.publish('voeis/cv_datum/new');")
-#= link_to('CREATE NEW', 'javascript:', :class=>'icon icon-add', :onclick=>"#{@tabId}_exec.cv_datum_new();")
-#- if !@copy_data.nil?
-#  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-#  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-#  = link_to('COPY GLOBAL', 'javascript:', :class=>'icon icon-copy', :onclick=>"#{@tabId}_copy_dialog_box.show();")
-#%br

-#%div{:id=>"version_store_site#{@site.id}", :dojoType=>"dojo.data.ItemFileReadStore", :jsId=>"pversions_site#{@site.id}", :data=>"pversions_json_site#{@site.id}", :style=>"height:0;margin:0;padding:0;"}

-#cv_management_tabs{:dojoType=>"dijit.layout.TabContainer", :style=>"width:870px;height:360px;margin-top:10px;padding-top:0;", 
-#  :prop=>"parseOnLoad:true;", :tabPosition=>"top", :useSlider=>"true", :tabStrip=>"true"}
-#  -#:prop=>"parseOnLoad:true;", :tabPosition=>"left-h", :tabStrip=>"false"}
-#:selected=>"true", :useSlider=>"false", :tabStrip=>"false"}
-#:style=>"width:870px;height:400px;margin:0;padding:0;", :selected=>"true"}


-##### MAIN TAB CONTAINER
-#%div{:dojoType=>"dijit.layout.TabContainer", :style=>"width:900px;height:400px;margin-top:10px;padding-top:0;", 
-#  :prop=>"parseOnLoad:true;", :tabPosition=>"top", :id=>"#{@tabId}_tabs"}
-#  -#, :nested=>"true"}
-#  %script{:type=>"dojo/method", :event=>"startup"}
-#    :plain
-#      //CLOSE PANE
-#      var pane = dijit.byId('#{@tabId}');
-#      if(pane)
-#        pane.connect(pane, "onClose", function(){
-#          //var this_pane = this;
-#          //this_pane.
-#          #{@tabId}_exec.cleanup();
-#        });

%div{:dojoType=>"dijit.layout.TabContainer", :style=>"width:95%;height:400px;margin-top:10px;padding-top:0;", 
  :prop=>"parseOnLoad:true;", :tabPosition=>"top", :id=>"#{@tabId}_tabs"}

  -##### MAIN SUB TAB- MANAGEMENT
  %div{:id=>"manage_#{@tabId}", :dojoType=>"dijit.layout.ContentPane", :title=>"#{@global ? 'Global' : 'Local'} Terms", 
    :jsId=>"#{@tabId}_manage", :style=>"margin-top:10px;"}
    -# :title=>"#{@cv_title}"
      
    -#%div{:id=>"#{@tabId}_cv_empty", :style=>"display:#{@cv_data.empty? ? 'block' : 'none'};"}
    -#  %br
    -#  %br
    -#  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    -#  %strong.icon.icon-warning
    -#    %em NO #{@cv_title.upcase}S EXIST!
    
    -#%div{:id=>"#{@tabId}_cv_main", :style=>"margin:0;padding:0;display:#{@cv_data.empty? ? 'none' : 'block'};height:100%;"}
    %div{:id=>"#{@tabId}_cv_main", :style=>"margin:0;padding:0;height:100%;"}
      
      -#%table{:dojoType=>"dojox.grid.EnhancedGrid", :plugins=>"{filter:true}",  :store=>"cv_store", :selected=>true, 
      -#    :style=>"width:90%;margin:0;padding:2px;", :jsId=>"cv_management_grid", :id=>"cv_management_grid"}
      -#  :style=>"width:90%;margin:0;", :rowSelector=>"20px", :jsId=>"VersionDisplayGrid", :id=>"VersionDisplayGrid"}
      %table{:dojoType=>"dojox.grid.EnhancedGrid", :store=>"#{@cv_title2}_data.cv_store", 
              :plugins=> "{nestedSorting:false, filter:true, indirectSelection:false}",  
              :clientSort=>"true", 
              :sortInfo=>"2",
              :style=>"margin:0;padding:0;border:#E3EBF2 2px solid;height:99%", 
              :jsId=>"#{@cv_title2}_data.cv_management_grid", 
              :id=>"#{@cv_title2}_data.cv_management_grid"}
        -#%script{:type=>"dojo/method", :event=>"onSelected", :args=>"idx"}
        -#  :plain
        -#    //SELECT CV TERM
        -#    var item = this.getItem(idx);
        -#    this.selection.clear();
        -#    //$('#cv_management').hide();
        -#    //$('#cv_management').show();
        -#    //cv_management_grid.dijit.focus;
        -#    //console.log('CLICKz', this.focus);
        -#    var this_col = this.focus.cell.index;
        -#    var col = this.layout.cells[1];
        -#    this.focus.setFocusCell(col,idx);
        -#    if(this_col==this.layout.cellCount-1) return;
        -#    console.log('CLICK!', item);
        -#    //#{@cv_title2}_exec.cv_datum_edit(item);
        %thead
          %tr
            %th{:field=>"id", :width=>"25px", :filterable=>false} ID
            - @cv_columns.each do |col|
              %th{:field=>"#{col[:field]}", :filterable=>"#{col[:filterable]}", :width=>"#{col[:width]}", :style=>"#{col[:style]}", 
                  :formatter=>"#{col[:formatter].blank? ? '' : @cv_title2+'_exec.Formatter.'+col[:formatter]}"} #{col[:label]}
            %th{:field=>"updated_at", :width=>"130px", :filterable=>true, :formatter=>"#{@cv_title2}_exec.Formatter.dateTime"} Updated
            %th{:field=>"_item", :filterable=>false, :width=>"75px", :formatter=>"#{@cv_title2}_exec.Formatter.controls"} - - -
          -#%th{:field=>"srs_id", :filterable=>true, :width=>"10%", :style=>""} Source ID
          -#%th{:field=>"srs_name", :filterable=>true, :width=>"30%", :style=>""} Source Name
          -#%th{:field=>"is_geographic", :filterable=>true, :width=>"10%", :style=>""} Geo?
          -#%th{:field=>"notes", :filterable=>true, :width=>"", :style=>""} Notes
          -#- @cv_columns.each do |col|
          -#  %th{:field=>"#{col[:field]}", :filterable=>true, :width=>"#{col[:width]}", :style=>"#{col[:style]}"} #{col[:label]}

  -##### 2ND SUB TAB- COPY GLOBAL
  - if !@copy_data.nil?
    %div{:id=>"copytab_#{@tabId}", :dojoType=>"dijit.layout.ContentPane", :title=>"Global Terms", 
      :style=>"width:860px;height:350px;margin-top:0;"}
      %button{:dojoType=>"dijit.form.Button", :title=>'Copy', :onClick=>"#{@cv_title2}_exec.copy_global();"} Copy Selected
      &nbsp;&nbsp;
      %button{:dojoType=>"dijit.form.Button", :title=>'Copy', :onClick=>"#{@cv_title2}_exec.copy_global_all();"} Copy ALL
      &nbsp; click to create local copies of GLOBAL #{@cv_title} entries
      %table{:dojoType=>"dojox.grid.EnhancedGrid", :store=>"#{@cv_title2}_data.copy_store", :jsId=>"global_grid", 
              :plugins=> "{filter:true, indirectSelection:{headerSelector:true,rowSelector:'multi',selectionMode:'extended'}}", 
              :clientSort=>"true", 
              :sortInfo=>"2", 
              :style=>"width:100%;height:320px;margin:0;padding:0;border:#E3EBF2 2px solid;"}
        -#%script{:type=>"dojo/method", :event=>"onSelected", :args=>"idx"}
        -#  :plain
        -#    //SELECT GLOBAL CV TERM
        -#    var form = #{@cv_title2}_form.domNode;
        -#    var item = this.getItem(idx);
        -#    this.selection.clear();
        -#    var col = this.layout.cells[1];
        -#    this.focus.setFocusCell(col,idx);
        -#    //#{@tabId}_copy_dialog_box.hide();
        -#    #{@cv_title2}_exec.cv_form_populate(item);
        -#    $('##{@cv_title2}_form #cv_prov_com').hide();
        -#    //$('##{@cv_title2}_idx').val('#'+item.idx);
        -#    var cv_idx = dojo.byId('#{@cv_title2}_idx');
        -#    if(cv_idx) cv_idx.value = '#'+item._0;
        -#    #{@tabId}_cv_dialog_box.set('title', 'NEW '+#{@cv_title2}_data.cv_title);
        -#    #{@tabId}_cv_dialog_box.show();
        %thead
          %tr
            -#%th{:field=>"id", :width=>"25px", :filterable=>false} ID
            - @copy_columns.each do |col|
              %th{:field=>"#{col[:field]}", :filterable=>"#{col[:filterable]}", :width=>"#{col[:width]}", :style=>"#{col[:style]}", 
                  :formatter=>"#{col[:formatter].blank? ? '' : @cv_title2+'_exec.Formatter.'+col[:formatter]}"} #{col[:label]}
            %th{:field=>"updated_at", :width=>"130px", :filterable=>true, :formatter=>"#{@cv_title2}_exec.Formatter.dateTime"} Updated

  -##### SUB TAB- NEW
  - if edit_auth
    %div{:id=>"#{@tabId}_newtab", :dojoType=>"dijit.layout.ContentPane", :title=>"Create New Term", 
      :style=>"width:860px;height:350px;margin-top:10px;display:#{@cv_data.empty? ? 'none' : 'block'}"}
      

-#%br{:style=>'float:none; clear:both;'}


:javascript
  (function(){

    console.log('END LOADING!!');
    //#{@cv_title2}_data.cv_management_grid.startup();

    dojo.subscribe("voeis/cv_datum/new", function(cv_title2) {
      window[cv_title2+'_exec'].cv_datum_new();
    });

    dojo.subscribe("voeis/cv_datum/copy", function(cv_title2) {
      window[cv_title2+'_copy_dialog_box'].show();
    });
  })();

