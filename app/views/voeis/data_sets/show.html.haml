-##center  
-#  #fig
-#    :plain
-#      <script type="text/javascript+protovis">
-#      var cars = #{@data_set.protovis_json}
-#
-#      var units = {
-#        local_date_time: {name: "DateTime", unit: ""},
-#        data_value: {name: "Data Value", unit: ""},
-#        site_id: {name: "Site", unit: " "},
-#        variable_id: {name: "Variable", unit: ""},
-#      }
-#
-#      var dims = pv.keys(units);
-#
-#      /* Sizing and scales. */
-#      var w = 820,
-#          h = 420,
-#          fudge = 0.5,
-#          x = pv.Scale.ordinal(dims).splitFlush(0, w),
-#          y = pv.dict(dims, function(t) pv.Scale.linear(
-#              cars.filter(function(d) !isNaN(d[t])),
-#              function(d) Math.floor(d[t])-fudge,
-#              function(d) Math.ceil(d[t]) +fudge
-#              ).range(0, h)),
-#          c = pv.dict(dims, function(t) pv.Scale.linear(
-#              cars.filter(function(d) !isNaN(d[t])),
-#              function(d) Math.floor(d[t])-fudge,
-#              function(d) Math.ceil(d[t]) +fudge
-#              ).range("steelblue", "brown"));
-#
-#      /* Interaction state. */
-#      var filter = pv.dict(dims, function(t) {
-#          return {min: y[t].domain()[0], max: y[t].domain()[1]};
-#        }), active = "local_date_time";
-#
-#      /* The root panel. */
-#      var vis = new pv.Panel()
-#          .width(w)
-#          .height(h)
-#          .left(30)
-#          .right(30)
-#          .top(30)
-#          .bottom(20);
-#
-#      // The parallel coordinates display.
-#      vis.add(pv.Panel)
-#          .data(cars)
-#          .visible(function(d) dims.every(function(t)
-#              (d[t] >= filter[t].min) && (d[t] <= filter[t].max)))
-#        .add(pv.Line)
-#          .data(dims)
-#          .left(function(t, d) x(t))
-#          .bottom(function(t, d) y[t](d[t]))
-#          .strokeStyle("#ddd")
-#          .lineWidth(1)
-#          .antialias(false);
-#
-#      // Rule per dimension.
-#      rule = vis.add(pv.Rule)
-#          .data(dims)
-#          .left(x);
-#
-#      // Dimension label
-#      rule.anchor("top").add(pv.Label)
-#          .top(-12)
-#          .font("bold 10px sans-serif")
-#          .text(function(d) units[d].name);
-#
-#      // The parallel coordinates display.
-#      var change = vis.add(pv.Panel);
-#
-#      var line = change.add(pv.Panel)
-#          .data(cars)
-#          .visible(function(d) dims.every(function(t)
-#              (d[t] >= filter[t].min) && (d[t] <= filter[t].max)))
-#        .add(pv.Line)
-#          .data(dims)
-#          .left(function(t, d) x(t))
-#          .bottom(function(t, d) y[t](d[t]))
-#          .strokeStyle(function(t, d) c[active](d[active]))
-#          .lineWidth(1);
-#
-#      // Updater for slider and resizer.
-#      function update(d) {
-#        var t = d.dim;
-#        filter[t].min = Math.max(y[t].domain()[0], y[t].invert(h - d.y - d.dy));
-#        filter[t].max = Math.min(y[t].domain()[1], y[t].invert(h - d.y));
-#        active = t;
-#        change.render();
-#        return false;
-#      }
-#
-#      // Updater for slider and resizer.
-#      function selectAll(d) {
-#        if (d.dy < 3) {
-#          var t = d.dim;
-#          filter[t].min = Math.max(y[t].domain()[0], y[t].invert(0));
-#          filter[t].max = Math.min(y[t].domain()[1], y[t].invert(h));
-#          d.y = 0; d.dy = h;
-#          active = t;
-#          change.render();
-#        }
-#        return false;
-#      }
-#
-#      /* Handle select and drag */
-#      var handle = change.add(pv.Panel)
-#          .data(dims.map(function(dim) { return {y:0, dy:h, dim:dim}; }))
-#          .left(function(t) x(t.dim) - 30)
-#          .width(60)
-#          .fillStyle("rgba(0,0,0,.001)")
-#          .cursor("crosshair")
-#          .event("mousedown", pv.Behavior.select())
-#          .event("select", update)
-#          .event("selectend", selectAll)
-#        .add(pv.Bar)
-#          .left(25)
-#          .top(function(d) d.y)
-#          .width(10)
-#          .height(function(d) d.dy)
-#          .fillStyle(function(t) t.dim == active
-#              ? c[t.dim]((filter[t.dim].max + filter[t.dim].min) / 2)
-#              : "hsla(0,0,50%,.5)")
-#          .strokeStyle("white")
-#          .cursor("move")
-#          .event("mousedown", pv.Behavior.drag())
-#          .event("dragstart", update)
-#          .event("drag", update);
-#
-#      handle.anchor("bottom").add(pv.Label)
-#          .textBaseline("top")
-#          .text(function(d) filter[d.dim].min.toFixed(0) + units[d.dim].unit);
-#
-#      handle.anchor("top").add(pv.Label)
-#          .textBaseline("bottom")
-#          .text(function(d) filter[d.dim].max.toFixed(0) + units[d.dim].unit);
-#
-#      vis.render();
-#
-#          </script>
-#          <style type="text/css">
-#
-#          #fig {
-#            width: 880px;
-#            height: 460px;
-#            position: relative;
-#            margin: auto;
-#          }
-#
-#          #title {
-#            position: absolute;
-#            top: 70px;
-#            left: 200px;
-#            padding: 10px;
-#            background: white;
-#          }
-#
-#          large {
-#            font-size: medium;
-#          }
-#       </style>

:javascript
  dojo.require("dijit.dijit");
  dojo.require("dijit.Dialog");
  dojo.require("dijit.form.Form");
  dojo.require("dijit.form.Button");
  dojo.require("dojox.form.Uploader");
  dojo.require("dojox.grid.EnhancedGrid");
  dojo.require("dojox.grid.enhanced.plugins.NestedSorting");
  dojo.require("dojox.grid.enhanced.plugins.Filter");
  dojo.require("dijit.layout.TabContainer");
  dojo.require("dojox.grid.enhanced.plugins.IndirectSelection");
  dojo.require("dojox.grid.enhanced.plugins.Pagination");
  dojo.require("dojo.data.ItemFileReadStore");
  dojo.require("dojo.data.ItemFileWriteStore");
  dojo.require("dojox.grid.enhanced.plugins.exporter.CSVWriter");
  var variables = #{@variables.to_json};

  
- tabId = "dataSet" + @data_set.id.to_s
- dataSetGrid = "dataSet" + @data_set.id.to_s + "_grid"
- dataSetStore ="dataSet" + @data_set.id.to_s + "_store"
-#%h3{:style=>"margin:5px 0;"}
%h3{:style=>"margin:8px 0 10px 0;"}
  %span.small{:style=>"font-size:14px;"}
    DATA SET:
  #{@data_set.name}
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  %span(style="font-size:11px;")
    -if !current_user.nil? && current_user.projects.include?(@project) && !current_user.has_role?('Observer',@project)
      %button(dojoType="dijit.form.Button" value="Remove" onclick="ConfirmRemoveSelectedFromDataSet(#{@data_set.id},#{dataSetGrid});") Remove Selected Data
      &nbsp;&nbsp;
    %button(dojoType="dijit.form.Button" value="Export" onclick="ExportDataSet(#{@data_set.id});") Export Data Set

-#%strong DATA SET DETAILS
-#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-#-if !current_user.nil? && current_user.projects.include?(@project) && !current_user.has_role?('Observer',@project)
-#  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-#  = link_to('REMOVE SELECTED DATA FROM DATA SET', 'javascript:', :class=>'icon icon-cancel', :onclick=>"RemoveSelectedFromDataSet(#{@data_set.id},#{dataSetGrid});return false;") 
-#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-#= link_to('EXPORT DATA SET', 'javascript:', :class=>'icon icon-proj', :onclick=>"ExportDataSet(#{@data_set.id});return false;") 
-#%br
-#%br

%div{:id=>"#{dataSetGrid}", :style=>"width:90%;height:375px;"}
-#%br
-#-if !current_user.nil? && current_user.projects.include?(@project) && !current_user.has_role?('Observer',@project)
-#  %button(dojoType="dijit.form.Button" name="remove_data_button" onclick="RemoveSelectedFromDataSet(#{@data_set.id},#{dataSetGrid});") 
-#    Remove Selected Data from Data Set
-#%button(dojoType="dijit.form.Button" name="export_data_set_button" onclick="ExportDataSet(#{@data_set.id});") 
-#  Export Data Set

%br

:javascript
  var dataSet#{@data_set.id} = {};

  function ExportDataSet(setId){
    window.location= '#{root_url}projects/#{@project.id}/data_sets/'+setId+'/export';
  }
  
  function ConfirmRemoveSelectedFromDataSet(setId,grid){
    confirmDialog('Confirm: Remove from Data Set &mdash;',
      'ARE YOU SURE?\n<br/>REMOVE '+sel_data_len+' DATA VALUES FROM: \n<br/>'+datasetname,
      function(yes){
        console.log('CONFIRM:',yes);
        if(!yes) return;
        //REMOVE SELECTED DATA####
        RemoveSelectedFromDataSet(setId,grid);
      }, 
      { buttonOk:'YES', buttonCancel:'Cancel' });
  };
  
  function RemoveSelectedFromDataSet(setId,grid){
    //get the data values
    var data_value_ids_string = ""
    var data_array = grid.selection.getSelected();
    for (i=0; i<data_array.length; i=i+1)
    {
      data_value_ids_string += "&data_value_ids[]=" + data_array[i].id.toString();
    }
    //form has a hidden data_set_id
    $.post('#{root_url}projects/#{@project.id}/apivs/remove_data_from_project_data_set.json?data_set_id=#{@data_set.id}' + data_value_ids_string,
      function(data) {
        $('.result').html(data);
      });
      if(data_array.length){
                  // Iterate through the list of selected items.
                  // The current item is available in the variable
                  // "selectedItem" within the following function:
                  dojo.forEach(data_array, function(selectedItem){
                      if(selectedItem !== null){
                          // Delete the item from the data store:
                          #{dataSetStore}.deleteItem(selectedItem);
                      } // end if
                  }); // end forEach
              } // end if
      dijit.byId(#{dataSetGrid}).selection.clear();
  } $.get("#{root_url}projects/#{@project_uid}/apivs/get_project_data_set_data.json?data_set_id=#{@data_set.id}",
    function(data) {
      dataSet#{@data_set.id}.values= data["data"]
    
    }
  );
  
  
  function getProperDate(local_date_time, rowIndex){
    return local_date_time.slice(0,local_date_time.length-6);
  }
  
  //formatter: 'val_grid_formatter.dateTime',
  // grid formatters
  var set_grid_formatter = {
    dateTime: function(value) {
      if(value==null || value=='') return '-';
      // Format DateTime string
      var d = new Date(value);
      //var fmt = d.getMonth()+'/'+d.getFullYear()
      return dojo.date.locale.format(d,{datePattern:"yyyy-MM-dd", timePattern:"HH:mm:ss z"});
    },
    selectItem: function(item) {
      //var checked_img = '<img src="/images/notice.png" alt="SELCT" />';
      var selected_img = '<img src="/images/1abu007.gif" alt="SELCT" />';
      var blank_img = '<img src="/images/blank.gif" width="16" height="16" />';
  
      //if(#{dataSetGrid}.value_selected(item)) 
      //  return selected_img;
      return blank_img;
    },
    variable_name: function(value){
      return variables[value]
    }
  };
  
  var set_grid_layout = [
  {
     field: '_item',
     name: '-',
     formatter: set_grid_formatter.selectItem,
     width: '24px'
  },
  {
     field: 'id',
     name: 'ID',
     width: 'auto'
  },
  {
     field: 'local_date_time',
     name: 'Timestamp',
     formatter: set_grid_formatter.dateTime,
     width: '165px'
  },
  {
     field: 'vertical_offset',
     name: 'Vertical Offset',
     width: 'auto'
  },
  {
     field: 'data_value',
     name: 'Value',
     width: 'auto'
  },
  {
     field: 'string_value',
     name: 'Value(string format)',
     width: 'auto'
  },
  {
     field: 'quality_control_level',
     name: 'QC Level',
     width: 'auto'
  },
  {
     field: 'variable_id',
     name: 'Variable',
     formatter: set_grid_formatter.variable_name,
     width: 'auto'
  },
  {
     field: 'published',
     name: 'Published',
     width: 'auto'
  },
  {
     field: 'datatype',
     name: 'DataType',
     width: 'auto'
  },
  ];
  
  var #{tabId}_data_json = {
    identifier: 'id',
    items: #{@data_set.data_values.to_json} };
  var #{dataSetStore} = new dojo.data.ItemFileWriteStore({data: #{tabId}_data_json });
  // create a new grid:
  var #{dataSetGrid} = new dojox.grid.EnhancedGrid({
     store: #{dataSetStore},
     grid_click: true,
     clientSort: true,
     selectMode: "extended",
     rowSelector: '0',
     structure: set_grid_layout,
     style: 'width:95%;',
     plugins: {filter:true, indirectSelection:{headerSelector:true, width:"40px", styles:"text-align: center;"}},
      onClick: function(ev) {
        this.grid_click = ev;
      },
     },
     document.createElement('div'));


  // append the new grid to the div " ":
  $('##{dataSetGrid}').append(#{dataSetGrid}.domNode);
  #{dataSetGrid}.startup();
  
  //protovis
  //var cars = #{@data_set.data_values.to_json} 
  //var units = {
  //  dv: {name: "data_value", unit: "dv"},
  //  v: {name: "variable_id", unit: " var"},
  //  s: {name: "site_id", unit: " site"},
  //}
  

