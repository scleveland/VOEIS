- dataId = @tabId+'_data'
- edit_auth = !current_user.nil? && (current_user.has_role?('Data Manager',@project) || current_user.has_role?('Principal Investigator',@project))
- url_api_key = current_user.nil? || current_user.api_key.blank? ? "" : "?api_key=#{current_user.api_key}"

-#%h3{:style=>"margin:5px 0;"}
%h3{:style=>"margin-top:0;"}
  = @site_name+':'
  Query Results
  [#{@tabId[-3,3]}]


-# #pagination-links
-# = pagination_links(@query, params[:page], 10)  

-#-if @row_array.empty?
-if @data_structs.empty?
  %strong
    VARIABLE:
    = "#{@var_name} | #{@units}"
    %br
    %br
    %em
      Sorry.  There is no Data for your search.

  :javascript
    console.log('FAILURR RESULT TABID: #{@tabId}');
    console.log('FAILURR RESULT DATAID: #{dataId}');
    console.log('DATAID object:',#{dataId});

-else
  
  :css
    div.gridbutton {
        width: 10px;
        height: 12px;
        font-size: smaller;
        font-weight: bold;
        text-align: center;
        opacity:0.3;
        filter:alpha(opacity=30); /* For IE8 and earlier */
        color: #999;
        color: #fff;
        background-color: #ccc;
        background-color: #055;
        padding: 3px;
    }
    .gridbutton {
        position: absolute;
        cursor: pointer;
    }
    #xxx {
        opacity:0.6;
        filter:alpha(opacity=60); /* For IE8 and earlier */
    
    }
    
    #gridContainer img { margin:0; }
    #gridContainer a { margin:0; }
    
    ##{@tabId}_query_script .dijitButton .dijitButtonNode { width:70px!important; }

  
  = javascript_include_tag(:defaults, "jquery.flot.min.js", "jquery.flot.selection.min.js","jquery.flot.navigate.min.js")
  
  -if edit_auth
    :javascript
      //### AUTH GLOBALS
      var edit_auth = true;
      var versions_url = '/projects/#{@project.id}/data_values';
      var data_del_url = '';
      
      //GRID CONTROL FUNCTIONS
      function dv_item_restore(item,callback){
        console.log('DV ROLLBACK:',item);
        var id = item.id;
        var data = {data_value: item};
        delete data.data_value.id;
        delete data.data_value.datetime_string;
        delete data.data_value.vertical_offset_range;
        delete data.data_value.published_string;
        delete data.data_value.site;
        delete data.data_value.variable;
        delete data.data_value.site_id;
        delete data.data_value.variable_id;
        $.ajax({
          type: 'PUT',
          url: '/projects/#{@project.id}/data_values/'+id+'.json#{url_api_key}',
          data: data,
          dataType: 'json',
          success: function(dat){
            callback(dat);
          }
        });
      };
      function dv_grid_refresh(data){
        datastore.update(data,#{dataId}.val_store);
        //### Refresh
        #{dataId}.val_grid.update();
        //#{dataId}.plot.update();
      };
      function dv_item_delete(id){
        //var item = #{dataId}.val_grid.getItem(idx);
        var item = datastore.get_raw(id,#{dataId}.val_store);
        confirmDialog('Confirm Rollback &mdash;',
          'ARE YOU SURE?\n<br/>DELETE DATA VALUE: \n<br/>'+item.data_value,
          function(yes){
            console.log('CONFIRM:',yes);
            if(!yes) return;
            //DataValue DELETE
            $.ajax({
              type: 'DELETE',
              url: '/projects/#{@project.id}/data_values/'+id+'?#{url_api_key}',
              data: {},
              dataType: 'json',
              success: function(result){
                var errs = result.errors;
                if(errs && errs.length) {
                  console.log('FAILED ERRORS:\n'+errs.join('/n'));
                } else {
                  //NOW UPDATE STORE
                  console.log('UPDATE GRID:',item,result)
                  datastore.delete(item,#{dataId}.val_store);
                  //### Refresh
                  #{dataId}.val_grid.update();
                  //#{dataId}.plot.update();
                };
              }
            });
          }, 
          { buttonOk:'YES', buttonCancel:'Cancel' });
      };

  -else
    :javascript
      //### NO AUTH GLOBALS
      var edit_auth = false;
      var versions_url = '/projects/#{@project.id}/data_values';
      var data_del_url = '';
  
  
  %div{:id=>"#{@tabId}_query_results"}
    -form_tag(:controller=>'samples', :action=>'export') do 
      
      %strong
        QUERY DATES:
        -if !@start_date.nil?
          -if @start_date > @end_date
            ERROR - start date should not come after end date
          -else
            = @start_date.to_date.strftime('%b %d, %Y')
            &ndash;
            = @end_date.to_date.strftime('%b %d, %Y')
            (#{@graph_data.length} Points)
        -else
          ERROR - invalid date entry
      
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      -#= link_to('CANCEL EDIT', 'javascript:', :class=>'icon icon-cancel', :onclick=>"if($$$id$$$){$('#edit-site00').hide();$('#show-site00').show();}else{site0ref.close()};") 
      = link_to('VIEW TABLE', 'javascript:', :class=>'icon icon-cancel', :id=>"#{@tabId}_toggle_view_id", :onclick=>"#{dataId}.toggle_views();return false;") 
    
      -#if !@row_array.empty?
      -if !@data_structs.empty?
        -if edit_auth
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          -#= link_to('CANCEL EDIT', 'javascript:', :class=>'icon icon-cancel', :onclick=>"if($$$id$$$){$('#edit-site00').hide();$('#show-site00').show();}else{site0ref.close()};") 
          -#= link_to('QUERY SCRIPT', 'javascript:', :class=>'icon icon-edit', :onclick=>"#{dataId}.pop_query_script();return false;") 
          = link_to('BATCH QA/QC', 'javascript:', :class=>'icon icon-edit', :onclick=>"#{dataId}.show_scripting(true);return false;")
        
        -#=hidden_field_tag('column_array', @column_array.to_json)
        -#=hidden_field_tag('row_array', @row_array.to_json)
        -#=hidden_field_tag('site_name', @site_name)
        -#=hidden_field_tag('site', @site.to_json)
        -#=hidden_field_tag('variable', @variable.to_json)
        -#=hidden_field_tag('start_date', @start_date)
        -#=hidden_field_tag('data_vals', @data_vals.to_json)
        -#=hidden_field_tag('end_date', @end_date)
        
        =hidden_field_tag('site', @site.to_json)
        =hidden_field_tag('variable', @variable.to_json)
        =hidden_field_tag('start_date', @start_date)
        =hidden_field_tag('end_date', @end_date)
        
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        -#=submit_tag("Export Results")
        = link_to('EXPORT RESULTS', 'javascript:', :class=>'icon icon-proj', 
              :onclick=>"$('##{@tabId}_query_results form')[0].submit();return false;") 

      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      = link_to('REFRESH', 'javascript:', :class=>'icon icon-proj', :onclick=>"refreshTab('#{@tabId}');") 
      -#= link_to('REFRESH', 'javascript:', :class=>'icon icon-hist', :onclick=>"refresh_history(#{@cv_item.id});return false;")
    
    =clear_break
    -#simplechart{:style=>"width: 250px; height: 150px;"}
    -#chartDiv{:style=>"width: 250px; height: 150px;"}
    
    %h3{:style=>"margin:0;float:left;"}
      = "#{@var_name} | #{@units}"

      -#-if !current_user.nil? && current_user.projects.include?(Project.get(@project_uid))
      -if !current_user.nil? && current_user.projects.include?(@project)
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        -#%p{:style=>"margin:7px 0;"}
        -#  %a{:href=>"javascript:", :onclick=>"dijit.byNode($('##{@tabId}_new_data_set')[0]).show();return false;"}
        -#    %label{:id=>"d_set", :class=>"icon icon-add", :onmouseover=>"this.style.cursor='hand'"}
        -#      Data Set:
        %button(name="add_data_button" id="#{@tabId}_add_data_button" onclick="addSelectedToDataSet('#{@tabId}');") 
          Add Selection &gt;&gt;
        - opts0 = "<option value='-'>- Select Data Set -</option>\n<option value='NEW'>NEW DATA SET</option>\n"
        = select_tag("#{@tabId}_data_set_select", (opts0+@data_set_options).html_safe)
        -#%button(name="add_data_button" id="#{@tabId}_add_data_button" onclick="addSelectedToDataSet();") 
        -#  &lt;&lt; with Data Set
    
    =clear_break
    -# #pagination-links
    -# = pagination_links(@query, params[:page], 10)  
    %br
    
    %div{:id=>"#{@tabId}_plot_view", :style=>"margin:0;"}
      
      #plotContainer{:style=>"width:800px;height:310px;margin:0;"}
      %br
      
    %div{:id=>"#{@tabId}_grid_view", :style=>"margin:0;"}
      
      #gridContainer{:style=>"width:850px;height:310px;margin:0;border:solid 1px #3A7594;"}
      %br
      -# 33e 3A7594 3889AA
      -#%div(dojoType="dijit.Dialog" title="DataSet" href="#{root_url}projects/#{@project_uid}/data_sets/#{#data_set.id}" style= "overflow:auto; width: 400px; height: 200px;")
  
  -if !@data_structs.empty? and edit_auth
    %div{:id=>"#{@tabId}_query_script", :style=>"display:none;overflow:visible;"}
      %form(id="#{@tabId}_query_script_form" dojoType="dijit.form.Form" method="post" style="overflow:visible;")
      
        %strong
          BATCH QA/QC &nbsp;
        
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        -#= link_to('ROLLBACK LAST CHANGE', 'javascript:', :class=>'icon icon-hist', :onclick=>"dojo.publish('voeis/project/site/history', [$$$id$$$]);")
        = link_to('ROLLBACK BATCH CHANGE', 'javascript:', :class=>'icon icon-hist', :onclick=>"#{dataId}.rollback_batch();return false;")
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        = link_to('QUERY RESULTS', 'javascript:', :class=>'icon icon-cancel', :onclick=>"#{dataId}.show_scripting(false);return false;")
        
        %br
        %br
        %em
          ENTER R-SCRIPT HERE &nbsp; &mdash; &nbsp; LOAD/SAVE: 
        - opts02 = "<option value='-'>- select -</option>\n"
        - opts02 += "<option value='SAVE'>SAVE SCRIPT</option>\n"
        - opts02 += "<option value='SAVEAS'>SAVE SCRIPT AS</option>\n"
        - opts02 += @scripts_options
        = select_tag("#{@tabId}_script_load_select", (opts02).html_safe)
        %br
        %input(name="script" dojoType="dijit.form.SimpleTextarea" id="#{@tabId}_query_script_text" rows="21" 
              style="width:600px!important;line-height:16px!important;float:left;")
        
        - dv_fields = ['data_value',
                        'string_value',
                        'date_time',
                        'utc_offset',
                        'datatype',
                        'value_accuracy',
                        'quality_control_level',
                        'replicate',
                        'vertical_offset',
                        'end_vertical_offset',
                        'published',
                        'variable_id'].join("<br/>\n").html_safe
        - dv_fields1 = ['data_value',
                        'date_time',
                        'quality_control_level',
                        'vertical_offset',
                        'published',
                        'variable_id'].join("<br/>\n").html_safe
        - dv_fields2 = ['string_value',
                        'utc_offset',
                        'value_accuracy',
                        'end_vertical_offset',
                        'replicate',
                        'provenance_comment'].join("<br/>\n").html_safe
        %div(style="width:350px;margin-left:10px;float:left;")
          %strong
            FIELDS:
          %br
          -#= dv_fields
          %table
            %tr
              %td(style="width:40%;")
                = dv_fields1
              %td
                = dv_fields2
          %br
          %strong
            SOURCE:
          %br
          - opts00 = "<option value='SEL'>SELECTED DATA</option>\n<option value='ALL'>ALL DATA (#{@graph_data.length} Points)</option>\n"
          = select_tag("#{@tabId}_script_source_select", (opts00+@data_set_options).html_safe)
          %br
          %br
          -#%strong
          -#  TARGET (SELF or VARIABLE):
          -#%br
          -#- opts01 =  "<option value='SELF'>UPDATE SELF</option>\n"
          -#-# opts01 += "<option value='DISP'>POPULATE DISPLAY GRID</option>\n"
          -#-# opts01 += "<option value='CSV'>EXPORT CSV FILE</option>\n"
          -#- opts01 += @variables_options
          -#= select_tag("#{@tabId}_script_target_select", opts01.html_safe)
          %br
          %br
          %input(name="dryrun" dojoType="dijit.form.CheckBox" id="#{@tabId}_query_script_dryrun" checked)
          DRYRUN
          %br
          %br
          %button{:dojoType=>"dijit.form.Button", :title=>"Execute"}
            EXECUTE
            %script{:type=>"dojo/method", :event=>"startup"}
              :plain
                //### ON-CLICK: SAVE
                this.connect(this, "onClick", function(){
                  dijit.byId('loading_dialog').show();
                  var start_time = new Date().valueOf();
                  var textarea = dijit.byId("#{@tabId}_query_script_text");
                  var datatarget = $('##{@tabId}_script_target_select').val();
                  var data_vals = [];
                  var script = '';
                  var formdata = {
                    script: '', 
                    dryrun: dijit.byId('#{@tabId}_query_script_dryrun').get('checked').toString()};
                  // GET BATCH DATA
                  var batch = #{dataId}.get_batch()
                  if(batch.error) {
                    //textarea.set('value','###NO DATA TO EXECUTE ON!\r\n'+textarea.value);
                    dijit.byId('loading_dialog').hide();
                    //error_dialog.pop(batch.error);
                    error_dialog.pop('### NO DATA TO EXECUTE ON ###');
                    return;
                  };
                  $.extend(formdata, batch);
                  //CLEANUP SCRIPT
                  lines = textarea.value.split(/\r\n|\n|\r/);
                  lines.forEach(function(ln,idx){
                    ln = ln.replace(/^\s+|\s+$/g, '');  //TRIM
                    if(ln[0]!='#' && ln.length) script += ln+'\r\n';
                  });
                  if(!script.length) {
                    //textarea.set('value','###NOTHING TO EXECUTE!\r\n'+textarea.value);
                    dijit.byId('loading_dialog').hide();
                    error_dialog.pop('### NOTHING TO EXECUTE ###');
                    return;
                  };
                  formdata['script'] = script;
                  //SET TARGET VARIABLE (or SELF)
                  if(datatarget!='SELF')
                    formdata['target'] = datatarget;
                  
                  $.post("#{project_path(@project)}/data_values/batch_update#{url_api_key}",
                    formdata,
                    function(data) {
                      //QUERY SCRIPT RESULTS
                      console.log('SCRIPT RESULTS:',data);
                      if(formdata.dryrun=='false') {
                        //UPDATE GRID/PLOT
                        var errs = #{dataId}.val_grid.batchUpdate(data);
                      } else {
                        //DRY-RUN: SHOW DRY-RUN GRID
                        var errs = [];
                        var grid_struct = val_layout.slice(0,-1);
                        var grid_data = []
                        for(var i=0; i<data.length; i++){
                          var item = datastore.get(data[i].id,#{dataId}.val_store);
                          var dateval = new Date(item.local_date_time.toString());
                          for(fld in data[i]) {
                            if(fld!='id' && fld!='error') item[fld] = data[i][fld];
                            else if(fld=='error') {
                              item['string_value'] = data[i]['error'];
                              var val_string = ' -- ['+item.id+'] '+dateval.format(datastore.date_format)+' / '+item.data_value;
                              errs.push(data[i].error+val_string);
                            };
                          };
                          grid_data.push(item);
                        };
                        grid_dialog.pop('DRY-RUN SCRIPT RESULTS (first 20)',grid_struct,grid_data);
                      };
                      var elapsed = (new Date().valueOf()-start_time)/1000;
                      var elapsed_mins = parseInt(elapsed/60);
                      var elapsed_secs = (elapsed%60).toFixed(3);
                      elapsed = 'Executed: ';
                      if(elapsed_mins) elapsed += elapsed_mins+' mins, '
                      elapsed += elapsed_secs+' secs\n';
                      if(errs) elapsed += '<br/><br/>\n'+errs.join('<br/>\n');
                      console.log(elapsed);
                      error_dialog.pop(elapsed,0,'SCRIPT COMPLETED');
                      dijit.byId('loading_dialog').hide();
                  });
                });
          &nbsp;&nbsp;
          %button{:dojoType=>"dijit.form.Button", :title=>"Clear", :onclick=>"$('##{@tabId}_query_script_text').val('');"}
            CLEAR
    
    
  :javascript
    dojo.require("dijit.dijit");
    dojo.require("dijit.Dialog");
    dojo.require("dijit.form.Form");
    dojo.require("dijit.form.Button");
    dojo.require("dojox.form.Uploader");
    dojo.require("dojox.grid.EnhancedGrid");
    dojo.require("dojox.grid.enhanced.plugins.NestedSorting");
    dojo.require("dojox.grid.enhanced.plugins.Filter");
    dojo.require("dijit.layout.TabContainer");
    dojo.require("dojox.grid.enhanced.plugins.IndirectSelection");
    dojo.require("dojox.grid.enhanced.plugins.Pagination");
    //dojo.require("dojox.charting.Chart2D");
    //dojo.require("dojox.charting.DataChart");
    //dojo.require("dojox.charting.StoreSeries");
    //dojo.require("dojox.charting.DataSeries");
    //dojo.require("dojo.store.Observable");
    //dojo.require("dojo.store.Memory");
    //dojo.require("dojox.charting.themes.Claro");
    dojo.require("dojo.data.ItemFileReadStore");
    dojo.require("dojo.data.ItemFileWriteStore");
    dojo.require("dojox.grid.enhanced.plugins.exporter.CSVWriter");
    
    
    console.log('RESULT -TABID: #{@tabId}');
   
    var #{dataId}_str = #{@meta_tags.to_json}.toString();
    var #{dataId} = {};
    #{dataId}.script_id = 0;
    #{dataId}.script_name = '';
    #{dataId}.script_description = '';
    #{dataId}.value_data = #{@data_structs.sql_to_json};
    for(var i=0;i<#{dataId}.value_data.length;i++) 
      #{dataId}.value_data[i]['selected'] = 0;
    #{dataId}.data = #{@graph_data.as_json};

    #{dataId}.val_store = new dojo.data.ItemFileWriteStore({data: {identifier: 'id', items: #{dataId}.value_data }});
    
    /***
    #{dataId}.dvalue_store = dojo.store.Observable(new dojo.store.Memory({
        data: {
            identifier: "id",
            label: "data values",
            items: #{dataId}.value_data
        }
    }));
    ***/
    
    //console.log('3RESULT -DATAID(#{dataId}):',#{dataId});
    
    //######################################
    //*** SWITCH VIEWS: PLOT/GRID
    #{dataId}.toggle_views = function() {
      var val_grid = #{dataId}.val_grid;
      var val_plot = #{dataId}.plot;
      $("#tooltip").remove();
      if($('##{@tabId}_toggle_view_id').text()=='VIEW TABLE') {
        $('##{@tabId}_toggle_view_id').text('VIEW GRAPH');
        $('##{@tabId}_plot_view').hide();
        $('##{@tabId}_grid_view').show();
        //val_grid.render();
        //val_grid.update();
        val_grid.resize();
        var grid_sel = val_grid.selection.getSelected()
        if(grid_sel.length) {
          console.log('SCROLL-TO:',grid_sel[0]._0);
          val_grid.scrollTo(0);
          val_grid.scrollToRow(grid_sel[0]._0);
          val_grid.scrollToRow(grid_sel[0]._0);
          //setTimeout(function(){
          //  val_grid.scrollTo(0);
          //  val_grid.scrollToRow(grid_sel[0]._0);
          //  val_grid.scrollToRow(grid_sel[0]._0);
          //},500);
        };
        
      } else {
        $('##{@tabId}_toggle_view_id').text('VIEW TABLE');
        $('##{@tabId}_grid_view').hide();
        $('##{@tabId}_plot_view').show();
        val_plot.unhighlight();
        plotutils.highlightItems(val_grid.selection.getSelected(),0,val_plot);
      };
    };
    
    //################################### BATCH-STUFF
    //*** SHOW/HIDE BATCH-SCRIPT DIV
    #{dataId}.show_scripting = function(show) {
      if(show){
        $('##{@tabId}_query_results').hide();
        $('##{@tabId}_query_script').show();
      } else {
        $('##{@tabId}_query_script').hide();
        $('##{@tabId}_query_results').show();
        #{dataId}.val_grid.resize();
      };
    };
    
    //*** GET BATCH DATA (for BATCH OPS)
    #{dataId}.get_batch = function() {
      console.log('>>>GET_BATCH...');
      var batch = {};
      var valdata = [];
      var data_vals = [];
      var datasource = $('##{@tabId}_script_source_select').val();
      if(datasource=='SEL') {
        console.log('>>>SEL');
        valdata = #{dataId}.val_grid.selection.getSelected();
        for(var i=0; i<valdata.length; i++) 
          data_vals.push(valdata[i].id[0]);
        batch['data_vals'] = data_vals;
        //batch['data_vals'] = valdata;
      } else if(datasource=='ALL') {
        valdata = #{dataId}.value_data;
        for(var i=0; i<valdata.length; i++) 
          data_vals.push(valdata[i].id[0]);
        batch['data_vals'] = data_vals;
        //batch['data_vals'] = valdata;
      } else {
        batch['data_set'] = datasource;
      };
      console.log('>>>DATA-VALS:',valdata);
      console.log('>>>DATA-VALS:',data_vals);
      console.log('>>>DATASOUREC:',datasource);
      if(!valdata.length && !parseInt(datasource)) {
        //textarea.set('value','###NO DATA TO EXECUTE ON!\r\n'+textarea.value);
        batch['error'] = '### NO DATA TO EXECUTE ON ###';
      };
      return batch;
    }
    
    //*** ROLLBACK BATCH
    #{dataId}.rollback_batch = function() {
      var rollbackdata = {rollback:true};
      var batch = #{dataId}.get_batch()
      if(batch.error) return;
      $.extend(rollbackdata, batch);
      $.post("#{project_path(@project)}/data_values/batch_update#{url_api_key}",
        rollbackdata,
        function(data) {
          //ROLLBACK RESULTS
          var errs = #{dataId}.val_grid.batchUpdate(data);
          if(errs){
            var rollback_msg = errs.length.toString()+' ROLLBACK ERRORS of '+data.length+' DataValues rolled back:\n<br/><br/>';
            rollback_msg += errs.join('\n<br/>');
          } else {
            var rollback_msg = 'ROLLBACK SUCCESSFUL: '+data.length+' DataValues';
          };
          error_dialog.pop(rollback_msg,0,'ROLLBACK COMPLETE');
        });
      //
    };
    
    //##############TESTING
    //var chart1 = new dojox.charting.Chart2D("simplechart");
    function trans1(store, item){
      // let's create our object
      var o = {
        x: store.getValue(item, "local_date_time"),
        y: store.getValue(item, "data_value")
      };
      return o;
    }
    
    //chart1.addPlot("default", {type: "Lines"});
    //chart1.addAxis("x");
    //chart1.addAxis("y", {vertical: true});
    //var series = new dojox.charting.DataSeries(value_store, { query: {id:"*"}}, trans1);
    //chart1.addSeries(value_data, {query: {id: "*"}}, trans1(value_data, ));
    //chart1.addSeries("DataValues", new dojox.charting.StoreSeries(dvalue_store, { query: { id: "*" } }, "local_date_time", "data_value"));
    //chart1.addSeries("Series 1", series);
    //chart1.render();

    //chart = new dojox.charting.DataChart("chartDiv" ,{type:dojox.charting.plot2d.Scatter,xaxis:{labelFunc:"seriesLabels"}});
    //chart.setStore(value_store, {symbol:"*"}, "data_value");  //  <-- single value property
    // set the layout structure:
    
    function exportAll() {
        dijit.byId("val_grid").exportGrid("csv", function(str) {
            dojo.byId("output").value = str;
        });
    };
    function exportSelected() {
        var str = dijit.byId("val_grid").exportSelected("csv");
        dojo.byId("output").value = str;
    };
    
    function getProperDate(local_date_time, rowIndex){
      return local_date_time.slice(0,local_date_time.length-6);
    }
    function addSelectedToDataSet(tab_id){
      var tab_data = window[tab_id+'_data'];
      var dataset_id = $('#'+tab_id+'_data_set_select').val();
      console.log('ADD-TO-DATASET:',tab_id,dataset_id,tab_data);
      //abort if NO DataSet selected
      if(!(parseInt(dataset_id)||0)) return;
      //get the data values
      dijit.byId('loading_dialog').show();
      data_array = tab_data.val_grid.selection.getSelected();
      var data_value_ids = [];
      for (i=0; i<data_array.length; i=i+1)
        data_value_ids.push(parseInt(data_array[i].id.toString()));
      //  data_value_ids_string= data_value_ids_string + "&data_value_ids[]=" + data_array[i].id.toString();
      //form has a hidden data_set_id
      //$.post('#{root_url}projects/#{@project_uid}/apivs/add_data_to_project_data_set.json?data_set_id=' + $("#data_set").val() + data_value_ids_string,
      $.post('#{project_path(@project)}/apivs/add_data_to_project_data_set.json?data_set_id='+dataset_id,
        {data_value_ids: data_value_ids},
        function(data) {
          console.log('ADDED TO DATASET:',dataset_id,data);
          //$('.result').html(data);
          dijit.byId('loading_dialog').hide();
        });
    }
    

    
    //######################################
    //formatter: 'val_grid_formatter.dateTime',
    // grid formatters
    var val_grid_formatter = {
      dateTime: function(value) {
        if(value==null || value=='') return '-';
        // Format DateTime string
        //console.log('DATE:',value);
        var d = new Date(value);
        //var fmt = d.getMonth()+'/'+d.getFullYear()
        return dojo.date.locale.format(d,{datePattern:"yyyy-MM-dd", timePattern:"HH:mm:ss z"});
      },
      dataDateTime: function(item) {
        if(item==null || item=='') return '-';
        // FORMAT LocalDateTime string for DataValue item
        //###FORMAT utc offset value: -7.5 = "-07:30" // 3.75 = "+03:45"
        var tzstr = item.utc_offset.toString();
        var tz0 = tzstr.split('.');
        var tz = (tz0[0][0]=='-' ? '-' : '+')+('00'+Math.abs(tz0[0])).slice(-2)+':';
        tz += tz0.length>1 ? (tz0[1]*6).toString().slice(0,2) : '00';
        //var d0 = new Date(item.date_time_utc.toString());
        //var d = new Date(d0.format("UTC:yyyy-mm-dd'T'HH:MM:ss"+tz));
        //var d = new Date(item.local_date_time.toString());
        //var dt = item.local_date_time.toString().slice(0,10);
        //var tm = item.local_date_time.toString().slice(11,19);
        var dt = item.local_date_time.toString().match(/\d\d\d\d-\d\d-\d\d/).toString();
        var tm = item.local_date_time.toString().match(/\d\d:\d\d:\d\d/).toString();
        //console.log('GRID-DATE:',item.date_time_utc.toString(),item.local_date_time.toString(),item.utc_offset.toString());
        //return d.format("yyyy-mm-dd HH:MM:ss "+tz);
        return dt+' '+tm+' '+tz;
      },
      trueFalse: function(value) {
        var checked_img = '<img src="/images/true.png" />';
        var blank_img = '<img src="/images/blank.gif" width="16" height="16" />';
        if(value) return checked_img;
        return blank_img;
      },
      selectItem: function(item) {
        //var checked_img = '<img src="/images/notice.png" alt="SELCT" />';
        var selected_img = '<img src="/images/1abu007.gif" alt="SELCT" />';
        var blank_img = '<img src="/images/blank.gif" width="16" height="16" />';
      
        if(#{dataId}.value_selected(item)) 
          return selected_img;
        return blank_img;
      },
      vertical_offset: function(item) {
        var fixed = 3;    //decimal places accuracy
        if(item==null || item=='') return '-';
        if(item.vertical_offset[0]==null) return '-';
        var vo_val = item.vertical_offset[0].toFixed(fixed);
        //if(item.end_vertical_offset[0]!=null && item.end_vertical_offset[0]!=0)
        if(item.end_vertical_offset[0]!=null)
          vo_val += ' &ndash; '+item.end_vertical_offset[0].toFixed(fixed);
        return vo_val;
      },
      controls: function(item) {
        if(item==null || item=='') return '-';
        //return 'TESTING-- #';
        var id = item.id[0];
        var idx = item._0;
        //console.log('GRID ITEM:',item);
        var hist_icon = '<img src="/images/icons/hist-icon16t.png" alt="history icon" title="HISTORY" style="margin:0;padding:0;height:16px;" />';
        var edit_icon = '<img src="/images/icons/edit.png" alt="history icon" title="EDIT" style="margin:0;padding:0;height:16px;" />';
        var delete_icon = '<img src="/images/icons/false.png" alt="delete icon" title="DELETE!" style="margin:0;padding:0;height:16px;" />';
        //var hist_link = '<a href="javascript:" onclick="alert(\'HISTORY COMING SOON! --\'+'+id+');return false;">'+hist_icon+'</a>\n';
        //var hist_link = '<a href="javascript:" onclick="confirm_now(\'HISTORY ON TERM: '+item[cv_name].toString()+'\\nCOMING SOON!\');return false;">'+hist_icon+'</a>\n';
        //var hist_link = '<a href="'+versions_url+'/versions?id='+id+'" onclick="window.open(this.href, \'HISTORY\', \'width=950,height=550\');return false;" style="margin:0;padding:0;">'+hist_icon+'</a>\n';
        var hist_link = '<a href="javascript:" onclick="dojo.publish(\'voeis/project/data/history\', ['+id+',\''+item.data_value.toString()+'\','+item.variable_id.toString()+',\'#{@var_name}\','+item.site_id+',\'#{@tabId}\']);return false;">'+hist_icon+'</a>\n';
        var edit_link = '<a href="javascript:" onclick="#{dataId}.val_grid.popEdit('+id+');return false;" style="margin:0;padding:0;">'+edit_icon+'</a>\n';
        var delete_link = '<a href="javascript:" onclick="dv_item_delete('+id+');return false;" style="margin:0;padding:0;">'+delete_icon+'</a>\n';
        var spaces = '&nbsp;';
        //if(item.used[0]) return spaces+hist_link;
        //return spaces+hist_link+spaces+delete_link;
        if(!edit_auth) return spaces+hist_link;
        return spaces+edit_link+spaces+hist_link+spaces+delete_link;
      },
      meta_tag: function(item){
        if (#{dataId}_str.match(item.id.toString()))
          
          //return '<a href="#", onClick="'+ "$('#data_value_show').attr('href','#{root_url.chop}#{project_data_values_path(@project)}/" + item.id.toString() + "')" + ";dijit.byId('data_value_show').show()" + '">View</a>';
          return '<button onClick="'+"dijit.byId('#{@tabId}_data_value_show').set('href','#{root_url.chop}#{project_data_values_path(@project)}/"+item.id.toString()+"');"+"dijit.byId('#{@tabId}_data_value_show').show();"+'" type="button">View</button>';
        else
          return "None"
        end
      }
    };

    var val_layout = [
    {
       //field: 'local_date_time',
       field: '_item',
       name: 'Timestamp',
       formatter: val_grid_formatter.dataDateTime,
       width: '170px'
    },
    {
       field: 'data_value',
       name: 'Value',
       width: 'auto'
    },
    {
       field: 'string_value',
       name: 'Value (string)',
       width: 'auto'
    },
    {
       field: 'datatype',
       name: 'DataType',
       width: '80px'
    },
    //{
    //   field: 'vertical_offset',
    //   name: 'Vertical Offset',
    //   width: 'auto'
    //},
    {
       field: '_item',
       name: 'Vertical Offset',
       formatter: val_grid_formatter.vertical_offset,
    //   width: '15%'
       width: '80px'
    },
    {
       field: 'quality_control_level',
       name: 'QC level',
       width: '50px'
    },
    {
      field: '_item',
      name: 'Meta Tags',
      formatter: val_grid_formatter.meta_tag,
      width: '80px'
    },
    {
       field: 'published',
       name: 'Pub',
       formatter: val_grid_formatter.trueFalse,
       width: '40px'
    },
    {
       field: '_item',
       name: 'DO',
       formatter: val_grid_formatter.controls,
       width: '80px'
    }
    ];
    //if(!edit_auth) val_layout.pop();

    //######################################
    // create a new grid:
    //#{dataId}.val_grid = new dijit_ext.Egrid({
    #{dataId}.val_grid = new dojox.grid.EnhancedGrid({
      store: #{dataId}.val_store,
      clientSort: true,
      rowSelector: '0',
      //rowsPerPage: 10,
      selectionMode:'extended',
      structure: val_layout,
      style: 'margin:0;',
      //TURN-OFF clickSelectEvent
      rowSelect: false,
      plugins: {filter:true, exporter:true,
       indirectSelection:{
         headerSelector:true, 
         rowSelector:'multi',
         selectionMode:'extended',
         cell:false,
         col:false,
         width:"40px", 
         styles:"text-align: center;"}
       //pagination:{
       //  sizeSwitch: true,
       //  position: "top",
       //  itemTitle: "Data Points"
      },
    
      onSelected: function(idx) {
       console.log('SELECT:',idx);
       var val_plot = #{dataId}.plot;
       val_plot.unhighlight();
       plotutils.highlightItems(this.selection.getSelected(),0,val_plot);
      },
      onDeselected: function(idx) {
       console.log('DESELECT:',idx);
       var val_plot = #{dataId}.plot;
       val_plot.unhighlight();
       plotutils.highlightItems(this.selection.getSelected(),0,val_plot);
      },
      xonClick: function(ev) {
       this.select_click = ev;
       console.log('GRID-CLICK:',ev);
       //var select_col = this.select_focus.cell.index;
       return;
       if(this.select_focus.cell==null) return;
       if(this.select_item){
         if(this.select_focus.cell.index!=0){
           this.selection.deselect(this.select_item);
           return;
         };
         this.select_item = false;
       };
       if(this.deselect_item){
         if(this.select_focus.cell.index!=0){
           this.selection.addToSelection(this.select_item);
           return;
         };
         this.deselect_item = false;
       };
      },
      popEdit: function(id) {
       //var item = this.getItem(idx);
       //var item = #{dataId}.value_data[idx];
       var item = datastore.get_raw(id,#{dataId}.val_store);
       if(!item){
         console.log('NO ITEM!');
         return;
       };
       var point = #{dataId}.data[item._0];
       //EDIT datavalue
       console.log('EDIT ITEM:',item);
       data_value_edit.pop(item, function(data) {
         var item = data_value_edit.item;
         //### Update Graph
         //data['selected'] = item.selected;
         //### Update Plot
         //var dateval = val_grid_formatter.dataDateTime(data);
         var dateval = data.local_date_time;
         dateval = new Date(dateval).valueOf();
         dateval = parseInt(dateval/1000)*1000;
         console.log('PLOT dateval: '+dateval);
         #{dataId}.data[item._0] = [dateval,data.data_value]
         var data_upd = #{dataId}.plot.getData();
         #{dataId}.plot.setData(data_upd);
         #{dataId}.plot.draw();
         #{dataId}.plot.unhighlight();
         var val_selected = #{dataId}.val_grid.selection.getSelected();
         plotutils.highlightItems(val_selected,0,#{dataId}.plot);
         //### Update Grid
         datastore.update(data,#{dataId}.val_store);
         #{dataId}.val_grid.update();
       });
      },
      batchUpdate: function(data) {
       //UPDATE GRID/PLOT
       errs = []
       for(var i=0; i<data.length; i++) {
         var item = datastore.get(data[i].id,#{dataId}.val_store);
         var dateval = new Date(item.local_date_time.toString());
         if(data[i].error) {
           var val_string = ' -- ['+item.id+'] '+dateval.format(datastore.date_format)+' / '+item.data_value;
           errs.push(data[i].error+val_string);
         } else {
           datastore.update(data[i],#{dataId}.val_store);
           if(data[i].hasOwnProperty('data_value')) {
             dateval = parseInt(dateval/1000)*1000;
             #{dataId}.data[item._0] = [dateval,data[i].data_value]
           };
         };
       };
       var data_upd = #{dataId}.plot.getData();
       #{dataId}.plot.setData(data_upd);
       #{dataId}.plot.draw();
       #{dataId}.plot.unhighlight();
       var val_selected = #{dataId}.val_grid.selection.getSelected();
       plotutils.highlightItems(val_selected,0,#{dataId}.plot);
       #{dataId}.val_grid.update();
       return errs;
      },
      onFetchError: function(err) {
       console.log('GRID FETCH ERROR:',err);
      }
    },
    document.createElement('div'));
    
    //#{dataId}.val_grid.changePageSize(10);
    
    // append the new grid to the div " ":
    //dojo.byId("gridContainer").appendChild(val_grid.domNode);
    
    $('##{@tabId}_query_results #gridContainer').append(#{dataId}.val_grid.domNode);

    // Call startup, in order to render the grid:
    #{dataId}.val_grid.startup();
    // Hide grid div initially (after rendering)
    setTimeout(function(){
      $('##{@tabId}_grid_view').hide();
      
    },200);
    
    // Setup tooltip removal on tab switch
    //var tabs = dijit.byId('tab_browser');
    //tabs.watch("selectedChild", function(name, oval, nval){
    //    console.log("changed TABs from: ", oval, " to ", nval);
    //    $("#tooltip").remove();
    //});    
    
    #{dataId}.plot = $.plot($("##{@tabId}_query_results #plotContainer"), [#{dataId}.data],{
           series: {
               color : "blue",
               lines: { show: true },
               points: { show: true }
              },
           grid:  { 
             backgroundColor: '#fcfcfc',
             hoverable: true, 
             clickable: true 
           },
           xaxis: { mode: "time" },
           pan:   { interactive: true },
           zoom: {interative: true}
    });

    // ADD ZOOM in/out button 
    $('<div class="gridbutton" title="ZOOM-IN" style="right:20px;top:20px;">+</div>').appendTo($("##{@tabId}_query_results #plotContainer")).click(function (e) {
       e.preventDefault();
       var sel = #{dataId}.val_grid.selection.getSelected();
       #{dataId}.plot.unhighlight();
       plotutils.highlightItems(sel,0,#{dataId}.plot);
       #{dataId}.plot.zoom();
    });
    $('<div class="gridbutton" title="ZOOM-OUT" style="right:20px;top:44px;">-</div>').appendTo($("##{@tabId}_query_results #plotContainer")).click(function (e) {
       e.preventDefault();
       var sel = #{dataId}.val_grid.selection.getSelected();
       #{dataId}.plot.unhighlight();
       plotutils.highlightItems(sel,0,#{dataId}.plot);
       #{dataId}.plot.zoomOut();
    });
    // CLEAR SELECTION
    $('<div class="gridbutton" title="CLEAR SELECTION" style="right:20px;bottom:40px;background-color:red;">x</div>').appendTo($("##{@tabId}_query_results #plotContainer")).click(function (e) {
       #{dataId}.plot.unhighlight();
       #{dataId}.val_grid.selection.deselectAll();
    });

    //Function ShowToolTip and previousPoint allow the hover function to display
     //a message for each data point on the graph when the cursor hoversover
     
     //I would only mess with the css if you really need to otherwise this
     //shouldn't need any modification
     function showTooltip(x, y, contents) {
       //delete tooltip_timeout;
       //var tooltip_timeout = setTimeout(function() {
       //  $("#tooltip").remove();
       //  delete tooltip_timeout;
       //},4000);
       $('<div id="tooltip">' + contents + '</div>').css( {
           position: 'absolute',
           display: 'none',
           'z-index': 1000,
           top: y + 5,
           left: x + 5,
           border: '1px solid #fdd',
           padding: '2px',
           'background-color': '#fee',
           opacity: 0.80
       }).appendTo("body").fadeIn(200);
     };

     //remove tooltip on mouseout
     //$("##{@tabId}_query_results #placeholder").bind("onmouseout", function (event) {
     //  $("#tooltip").remove();
     //};

     //Most of this should remain the same
     //NOTE-- the time string for #x is in UTC format and currently is in GMT time
     #{dataId}.previousPoint = null;
     #{dataId}.plotClick = [];
     #{dataId}.plotHover = [];
     #{dataId}.domClick = 0;
     #{dataId}.hoverDelay = 0;
     #{dataId}.editData = false;
     
     //DOM hover event
     //$('tab_browser').hover( function(e){
     //$('body').mouseover( function(e){
     $('xxbody').hover( function(e){
       //console.log('DOM-HOVER:',e);
       if(#{dataId}.plotHover.length==0) {
         $("#tooltip").remove();
         return;
       };
       var event = #{dataId}.plotHover[0];
       var pos = #{dataId}.plotHover[1];
       var item = #{dataId}.plotHover[2];
       if(!item) {
         $("#tooltip").remove();
         return;
       };
       console.log('DOM-PLOT-HOVER =',#{dataId}.plotHover,e);
       showPlotTooltip(event,pos,item);
     },function(e){
       //CLEAR EVENT
       #{dataId}.plotHover = [];
     });
     
     //HOVER ON TOOLTIP: REMOVE TOOLTIP
     $("#tooltip").bind('mouseout', function(e){
       console.log('TOOLTIP-OUT:',e);
       $("#tooltip").remove();
     });
     $("#tooltip").bind('mouseleave', function(e){
       console.log('TOOLTIP-LEAVE:',e);
       $("#tooltip").remove();
     });
     
     $('body').click( function(e){
       //console.log('DOM-CLICK:',e);
       if(#{dataId}.plotClick.length==0) return;
       
       var event = #{dataId}.plotClick[0];
       var pos = #{dataId}.plotClick[1];
       var item = #{dataId}.plotClick[2];
       //SELECT ROW IN GRID
       if(item) {
         var idx = item.dataIndex;
         var val_item = #{dataId}.value_data[idx];
         //var val_grid = dijit.byNode($('##{@tabId}_query_results #gridContainer div')[0]);
         var val_grid = #{dataId}.val_grid;
         var val_plot = #{dataId}.plot;
         var val_sel = val_grid.selection;
         //var store = #{dataId}.val_store;
         console.log('PLOT-CLICK:',e,event,pos,item,val_item);
         if(e.shiftKey) {
           //SHIFT-CLICK: Select Range
           var sel = val_sel.getSelected();
           //#sel = sel.map(function(item){return new Date(item.local_date_time.toString()).valueOf()});
           //var selx = sel.map(function(item){return #{dataId}.data[item._0][0]});
           //var first = Math.min.apply(Math, selx);
           //var last = Math.max.apply(Math, selx);
           var limits = plotutils.selectionLimits(sel,val_plot)
           console.log('LIMITS:',limits);
           if(item.datapoint[0]<limits.values[0]) {
             val_sel.selectRange(val_item._0, limits[1]._0);
           } else if(item.datapoint[0]>limits.values[1]) {
             val_sel.selectRange(limits[0]._0, val_item._0);
           } else {
             val_sel.selectRange(limits[0]._0, limits[1]._0);
           };
           plotutils.highlightItems(val_grid.selection.getSelected(),0,val_plot);
           //val_grid.scrollTo(0);
           //var toend = limits[1]._0 - 4;
           //if(toend<0) toend = 0;
           //val_grid.scrollToRow(toend);
         } else if(e.altKey) {
           //ALT-CLICK: EDIT DataValue at Point
           data_value_edit.editing = true;
           var val_id = parseInt(val_item.id.toString());
           val_grid.popEdit(val_id);
           $("#tooltip").remove();
           //#{dataId}.toggle_views();
           //val_grid.scrollToRow(val_item._0);
           //val_grid.scrollToRow(val_item._0);
         } else if(e.ctrlKey) {
           //CTRL-CLICK: UNUSABLE ON MAC
         } else {
           //NORMAL-CLICK: Select/Deselect Point
           //###SCROLL TO TOP of GRID
           //window.scrollTo(0,0);
           //$('html #main_container').animate({scrollTop:580}, 'slow');//IE, FF
           //$('body #main_container').animate({scrollTop:580}, 'slow');//chrome, safari
           if(!data_value_edit || !data_value_edit.editing)
             if(val_grid.selection.isSelected(idx)) {
               console.log('ALREADY SELECTED!');
               //val_plot.unhighlight(0,idx);
               val_sel.deselect(idx);
             } else {
               console.log('NOT SELECTED!');
               //val_plot.highlight(0,idx);
               if(val_sel.getSelectedCount())
                 val_sel.addToSelection(idx);
               else val_sel.select(idx);
             };
           //plotutils.highlightItems(val_sel.getSelected(),0,val_plot);
           setTimeout(function(){
             plotutils.highlightItems(val_sel.getSelected(),0,val_plot);
           },200);
           //val_grid.selection.deselectAll();
           //val_grid.scrollTo(0);
           //val_grid.scrollToRow(idx);
           //val_grid.selection.addToSelection(val_item);
           //val_grid.selection.toggleSelect(val_item);
         };
         
         val_grid.update();
       };
       
       //CLEAR EVENT
       #{dataId}.plotClick = [];
     });
     
     
     $("##{@tabId}_query_results #plotContainer").bind("plothover", function (event, pos, item) {
       //
       //showPlotTooltip(event,pos,item);
       #{dataId}.plotHover = [event,pos,item];
       if(item) showPlotTooltip(event,pos,item);
       else {
           $("#tooltip").remove();
           #{dataId}.previousPoint = null;            
       };
       //console.log('PLOT-HOVER =',#{dataId}.plotHover);
       return;
       
       //$("#tooltip").remove();
       //window.clearTimeout(hoverDelay);
       
       //if(#{dataId}.hoverDelay) return;
       //
       //var mEpoch = pos.x; // convert to milliseconds (Epoch is usually expressed in seconds, but Javascript uses Milliseconds)
       //var dDate = new Date();
       //dDate.setTime(mEpoch);
       //$("#x").text(dDate.toLocaleString());
       //$("#y").text(pos.y);
       
       /****
       if (item) {
         if (#{dataId}.previousPoint != item.datapoint) {
           #{dataId}.previousPoint = item.datapoint;
           $("#tooltip").remove();
           var x = item.datapoint[0].toFixed(2),
               y = item.datapoint[1].toFixed(2);
           var mEpoch = x; // convert to milliseconds (Epoch is usually expressed in seconds, but Javascript uses Milliseconds)
           dDate = new Date();
           dDate.setTime(mEpoch);
           var msg = val_grid_formatter.dateTime(dDate) + " = " + y + "  #{@var_name}|#{@units}";
           #{dataId}.hoverDelay = window.setTimeout(function(){
             showTooltip(item.pageX, item.pageY, msg);
             #{dataId}.hoverDelay = 0;
           },1);
         };
       } else {
         $("#tooltip").remove();
         #{dataId}.previousPoint = null;            
       };
       ****/
     });
     
     function showPlotTooltip(event,pos,item) {
       //var mEpoch = pos.x; // convert to milliseconds (Epoch is usually expressed in seconds, but Javascript uses Milliseconds)
       //var dDate = new Date();
       //dDate.setTime(mEpoch);
       //$("#x").text(dDate.toLocaleString());
       //$("#y").text(pos.y);
       
       if (#{dataId}.previousPoint != item.datapoint) {
         #{dataId}.previousPoint = item.datapoint;
         $("#tooltip").remove();
         var x = item.datapoint[0].toFixed(2),
             y = item.datapoint[1].toFixed(2);
         var mEpoch = x; // convert to milliseconds (Epoch is usually expressed in seconds, but Javascript uses Milliseconds)
         var ttip_help = "&nbsp; &bull; CLICK/SHIFT-CLICK to select";
         if(edit_auth) ttip_help += "<br/>&nbsp; &bull; ALT-CLICK to edit DataValue";
         dDate = new Date();
         dDate.setTime(mEpoch);
         showTooltip(item.pageX, item.pageY,
           //*****You will need to change the sensor name here to the appropriate one selected above
                    //dDate.toLocaleString() + " = " + y + " " + "#{@variable}|#{@units}" ();
                    val_grid_formatter.dateTime(dDate) + " = " + y + " " + "#{@var_name}|#{@units}<br/>"
                    +ttip_help);
       };
       
     };
     
     
     // PLOTCLICK event to scroll to point on datagrid
     $("##{@tabId}_query_results #plotContainer").bind("plotclick", function (event, pos, item) {
         //
         #{dataId}.plotClick = [event,pos,item];
         //var e = #{dataId}.domClick;
         return;
         
         //SELECT ROW IN GRID
         if(item) {
           var idx = item.dataIndex;
           var val_item = #{dataId}.value_data[idx];
           //var val_grid = dijit.byNode($('##{@tabId}_query_results #gridContainer div')[0]);
           var val_grid = #{dataId}.val_grid;
           var val_plot = #{dataId}.plot;
           //var store = #{dataId}.val_store;
           console.log('PLOT-CLICK:',e,event,pos,item,val_item);
           if(e.shiftKey) {
             //SHIFT-CLICK: Select Range
             //val_grid.changePageSize(0);
             var sel = val_grid.selection.getSelected();
             //#sel = sel.map(function(item){return new Date(item.local_date_time.toString()).valueOf()});
             //var selx = sel.map(function(item){return #{dataId}.data[item._0][0]});
             //var first = Math.min.apply(Math, selx);
             //var last = Math.max.apply(Math, selx);
             var limits = plotutils.selectionLimits(sel,val_plot)
             console.log('LIMITS:',limits);
             if(item.datapoint[0]<limits.values[0]) {
               val_grid.selection.selectRange(val_item._0, limits[1]._0);
             } else {
               if(item.datapoint[0]>limits.values[1]) {
                 val_grid.selection.selectRange(limits[0]._0, val_item._0);
               } else {
                 val_grid.selection.selectRange(limits[0]._0, limits[1]._0);
               };
             };
             plotutils.highlightItems(val_grid.selection.getSelected(),0,val_plot);
             val_grid.scrollTo(0);
             var toend = limits[1]._0 - 4;
             if(toend<0) toend = 0;
             val_grid.scrollToRow(toend);
           } else {
             if(e.altKey) {
               //ALT-CLICK: Select Range
               #{dataId}.toggle_views();
               val_grid.scrollToRow(val_item._0);
             } else {
               //NORMAL-CLICK: Select/Deselect Point
               //###SCROLL TO TOP of GRID
               //window.scrollTo(0,0);
               //$('html #main_container').animate({scrollTop:580}, 'slow');//IE, FF
               //$('body #main_container').animate({scrollTop:580}, 'slow');//chrome, safari

               if(val_grid.selection.isSelected(idx)) val_plot.unhighlight(0,idx);
               else val_plot.highlight(0,idx);
               //val_grid.selection.deselectAll();
               val_grid.scrollTo(0);
               val_grid.scrollToRow(idx);
               //val_grid.selection.addToSelection(val_item);
               val_grid.selection.toggleSelect(val_item);
             };
           };

           val_grid.update();
         };

         //CLEAR EVENT
         #{dataId}.domClick = 0;
         
     });
     
     //###SCROLL TO SEARCH DIV
     //window.scrollTo(0,0);
     //$('html #main_container').animate({scrollTop:220}, 'slow');//IE, FF
     //$('body #main_container').animate({scrollTop:220}, 'slow');//chrome, safari
     //$('##{@tabId}_query_results').animate({scrollTop:200}, 'slow');


     //ON-TAB-LOAD!
     function initPage() {
       console.log('initPage: NOW');
       console.log('DATA-QUERY TABID: #{@tabId}');
       console.log('DATA-SET-SELECT:',$("##{@tabId}_data_set_select")[0]);
       
       $("##{@tabId}_data_set_select").change(function(e){
         console.log('DATA-SET-SELECT-CHANGE!');
         if(this.value!='NEW') return;
         //OPEN DIALOG
         $("##{@tabId}_data_set_select").val('-');
         //new_data_set.setup("#{@tabId}_data_set_select");
         //NEW name_entry_dialog--
         name_entry_dialog.pop('Create New Data Set',{
           SAVE: 'Create Data Set',
           FIELD1: 'Type:',
           FIELD3: 'Description:'
         },function(results){
           var vardata = {name: results.name, description: results.description, type: results.type};
           console.log('CREATE DATASET:',vardata);
           $.post("#{project_path(@project)}/apivs/create_project_data_set.json#{url_api_key}",
             vardata,
             function(data) {
               $('##{@tabId}_data_set_select').append($("<option></option>").attr("value",data['id']).text(results.name));
               $('##{@tabId}_data_set_select').val(data['id']);
               //$('#data_set_select').append($("<option></option>").attr("value",data['id']).text(els.name.value)); 
               //$('#data_set_select').val(data['id']);
           });
         });
       });
       
       $("##{@tabId}_script_load_select").change(function(e){
         //console.log('CHANGE!');
         if(this.value=='-') return;
         var save = this.value;
         $("##{@tabId}_script_load_select").val('-');
         if(save.slice(0,4)=='SAVE') {
           //###SAVE
           console.log('CHANGE SCRIPT: SAVE-',save);
           var script = dijit.byId('#{@tabId}_query_script_text').get('value');
           if(!script.match(/\s*\S+\s*/g)) return;
           var ttl = 'SAVE SCRIPT'
           var post_data = {
             id: #{dataId}.script_id,
             name: #{dataId}.script_name,
             description: #{dataId}.script_description,
             script_body: dijit.byId('#{@tabId}_query_script_text').get('value')
           };
           if(#{dataId}.script_id==0 || save=='SAVEAS') {
             //NEW- POST
             delete post_data.id;
             if(#{dataId}.script_id) ttl = 'SAVE SCRIPT AS'
             //OPEN SAVE SCRIPT DIALOG
             name_entry_dialog.pop(ttl,{
               SAVE: 'Save Script',
               FIELD3: 'Description:'
             },function(results){
               console.log('SAVE SCRIPT RESULTS:',results);
               post_data.name = results.name;
               post_data.description = results.description;
               //POST save script
               $.ajax({
                 type: 'POST',
                 url: '#{project_path(@project)}/scripts.json#{url_api_key}',
                 data: {script: post_data},
                 success: function(data){
                   console.log('SCRIPT-POST:',data);
                   $('##{@tabId}_script_load_select').append($("<option></option>").attr("value",data.id).text('>> '+results.name));
                   $('##{@tabId}_script_load_select').val(data.id);
                   //$('#data_set_select').append($("<option></option>").attr("value",data['id']).text(els.name.value)); 
                   //$('#data_set_select').val(data['id']);
                   #{dataId}.script_id = parseInt(data.id);
                   #{dataId}.script_name = data.name;
                   #{dataId}.script_description = data.description;
                 },
                 dataType: 'json'
               });
               
             });
           } else {
             //PUT update script
             console.log('CHANGE SCRIPT: UPDATE-',save);
             $.ajax({
               type: 'PUT',
               url: '#{project_path(@project)}/scripts/'+post_data.id+'.json#{url_api_key}',
               data: {script: post_data},
               success: function(data){
                 console.log('SCRIPT-PUT:',data);
                 #{dataId}.script_id = parseInt(data.id);
                 #{dataId}.script_name = data.name;
                 #{dataId}.script_description = data.description;
                 $('##{@tabId}_script_load_select').val(data.id);
               },
               dataType: 'json'
             });
           };
           
         } else {
           //###LOAD
           console.log('CHANGE SCRIPT: LOAD-',save);
           #{dataId}.script_id = parseInt(save);
           $.ajax({
             type: 'GET',
             url: '#{project_path(@project)}/scripts/'+save+'.json#{url_api_key}',
             success: function(data){
               #{dataId}.script_id = parseInt(data.id);
               #{dataId}.script_name = data.name;
               #{dataId}.script_description = data.description;
               dijit.byId('#{@tabId}_query_script_text').set('value',data.script_body);
               $('##{@tabId}_script_load_select').val(data.id);
               console.log('SCRIPT-LOAD:',data);
             },
             dataType: 'json'
           });
           
         };
         
       });
       
       console.log('initPage: DONE');
     };
     
     
     //ON-LOAD READY
     $(window).ready(function(){
       console.log('QUERY-RESULTS **LOADED**');
       
       initPage();

     });

-##data_value_show{:dojoType=>"dijit.Dialog", :title=>"Data Value", :href=>"", :style=>"overflow:auto; width: 500px; height: 400px;"}
%div{:id=>"#{@tabId}_data_value_show", :dojoType=>"dijit.Dialog", :title=>"Data Value", :href=>"", :style=>"overflow:auto; width: 500px; height: 400px;"}


:javascript
  dojo.addOnLoad(function() {
    initPage();
    
  });
