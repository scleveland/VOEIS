- content_for(:javascripts) do
  :javascript
    function  createVariable(){ 
    $.post("#{root_url + "variables"}.json?variable[variable_code]=" +$("#variable_variable_code").val()+"&variable[variable_name]=" + $("#variable_variable_name").val()+"&variable[speciation]="+$("#variable_speciation").val()+"&variable[variable_units_id]="+ $("#variable_variable_units_id").val() + "&variable[sample_medium]="+ $("#variable_sample_medium").val() + "&variable[quality_control]="+$("#variable_quality_control").val()+"&variable[is_regular]="+$("#variable_is_regular").val()+"&variable[time_support]="+$("#variable_time_support").val()+"&variable[time_units_id]="+$("#variable_time_units_id").val()+"&variable[data_type]="+$("#variable_data_type").val()+"&variable[general_category]="+$("#variable_general_category").val()+"&variable[no_data_value]="+$("#variable_no_data_value").val()+"&variable[detection_limit]="+$("#variable_detection_limit").val()+"&variable[value_type]="+$("#variable_value_type").val()+"&variable[lab_method_id]="+$("#variable_lab_method_id").val()+"&variable[field_method_id]="+$("#variable_field_method_id").val()+"&variable[spatial_offset_type]="+$("#variable_spatial_offset_type").val()+"&variable[spatial_units_id]="+$("#variable_spatial_units_id").val()+"&variable[spatial_offset_value]="+$("#variable_spatial_offset_value").val()+"&variable[lab_id]="+$("#variable_lab_id").val(),
    function(data) {
    updated_var = data  
    update_text= data["variable_name"];
    $("#"+current_id_to_update).val(data["id"]);
    update_id = data["id"];
    updateVarSpans(current_column);
    dijit.byId("new_variable").hide();
    //dijit.byId("waiting_dialog").hide();
    }
    );
    }
    dojo.require("dijit.Tooltip");
    dojo.require("dijit.form.Button");
    dojo.require("dijit.Dialog");
    dojo.require("dojox.grid.EnhancedGrid");
    dojo.require("dojox.grid.enhanced.plugins.NestedSorting");
    dojo.require("dojox.grid.enhanced.plugins.Filter");
    dojo.require("dojo.data.ItemFileReadStore");
    dojo.require("dijit.layout.TabContainer");
    dojo.require("dojox.grid.enhanced.plugins.IndirectSelection");
    var var_name_data = [
       #{variable_names.map{|vname| "        "+vname.to_json}.join(",\n")}
     ];
     var var_names_json = {
         identifier: 'id',
         label: 'term',
         items: var_name_data };

     function toggle_optional(){
         if($('#simple_toggle').html().indexOf("+") != -1){
           $('#optional').toggle();
           $('#simple_toggle').html("-");
         }
         else{
           $('#optional').toggle();
            $('#simple_toggle').html("+");
         }
       }


#new_variable{:dojoType=>"dijit.Dialog", :title=>"New Variable", :style=>"width:700px; height:500px; overflow:auto; background:white;"}
  = render(:partial => "variable_name_cv")
  = render(:partial => "sample_medium_cv")
  = render(:partial => "value_type_cv")
  = render(:partial => "speciation_cv")
  = render(:partial => "data_type_cv")
  = render(:partial => "quality_control_level")
  = render(:partial => "general_category_cv")
  = render(:partial => "lab_method")
  = render(:partial => "lab")
  = render(:partial => "field_method")
  = render(:partial => "spatial_offset_type")
  = form_for (:variable) do |f|

    -var_name_options = Array.new
    %label{:id => "var_name", :onclick=>"dijit.byId('new_variable_name_1').show();", :class => "icon icon-add", :onmouseover =>"this.style.cursor='hand'"}Variable Name:
    %span{:id=>"var_name_span"} 
    %div{:dojoType=>"dijit.Tooltip", :connectId=> "var_name", :position=>"above"}
      This is the general Variable Name that will be associated with this measurement.
    =clear_break
    -variable_name_options = Array.new
    - variable_names.all(:order => [:term.asc]).each do |data_type|
      -variable_name_options <<[data_type.term]
    = f.select('variable_name',  options_for_select(variable_name_options), :class => "variable_name")
    =clear_break
    =clear_break
    
    
    %label{:id => "spec", :onclick=>"dijit.byId('new_general_category_1').show();", :class => "icon icon-add", :onmouseover =>"this.style.cursor='hand'"}General Category:
    %br
    -general_category_options = Array.new
    - general_categories.all(:order => [:term.asc]).each do |data_type|
      -general_category_options <<[data_type.term]
    = f.select('general_category',  options_for_select(general_category_options), :class => "data_type")
    =clear_break
    =clear_break
    -speciation_options = Array.new
    %label{:id => "spec", :onclick=>"dijit.byId('new_speciation_1').show();", :class => "icon icon-add", :onmouseover =>"this.style.cursor='hand'"}Speciation: 
    %br
    %div{:dojoType=>"dijit.Tooltip", :connectId=> "spec", :position=>"above"}
      This refers to the chemical form or compound of the material being measured. This is not required for all measurements.
    - speciations.all(:order => [:term.asc]).each do |speciation|
      -speciation_options <<[speciation.term]
    = f.select('speciation',  options_for_select(speciation_options, "Not Applicable"), :class => "speciation")
    =clear_break
    =clear_break
    %label{:id=>"var_units"} Variable Units: 
    %br
    %div{:dojoType=>"dijit.Tooltip", :connectId=> "var_unit", :position=>"above"}
      This will the Units associated with this measurement.
    -unit_options = Array.new
    -units.all(:order => [:units_name.asc]).each do |unit|
      -unit_options <<[unit.units_name+':'+unit.units_abbreviation, unit.id.to_s]
    = f.select('variable_units_id',  options_for_select(unit_options), :class=>"variable_units_id")
    -#=clear_break
    -#-sample_medium_options = Array.new
    -#%label{:id => "samp_medium", :onclick=>"dijit.byId('new_sample_medium_1').show();", :class => "icon icon-add", :onmouseover =>"this.style.cursor='hand'"}Sample Medium: 
    -#%br
    -#%div{:dojoType=>"dijit.Tooltip", :connectId=> "samp_medium", :position=>"above"}
    -#  This the type of material that the measurment is being performed on.
    -#- sample_mediums.all(:order => [:term.asc]).each do |sample_medium|
    -#  -sample_medium_options <<[sample_medium.term]
    -#= f.select('sample_medium',  options_for_select(sample_medium_options, "Unknown"), :class => "sample_medium")
    = f.hidden_field("sample_medium", :value=>"Surface Water")
    -#=clear_break
    -#%label{:id => "val_type", :onclick=>"dijit.byId('new_value_type_1').show();", :class => "icon icon-add", :onmouseover =>"this.style.cursor='hand'"}Value Type: 
    -#%div{:dojoType=>"dijit.Tooltip", :connectId=> "val_type", :position=>"above"}
    -#  This is the type of data that should be measured by this variable.<br>
    -#  For example: <i>is this data that is colled from a logger.</i>
    -#-value_type_options = Array.new
    -#-value_types.all(:order => [:term.asc]).each do |type|
    -#-value_type_options <<[type.term]
    -#= f.select('value_type',  options_for_select(value_type_options))
    =f.hidden_field('value_type', :value=>"Sample")
    =clear_break
    =clear_break
    -data_type_options = Array.new
    %label{:id => "spec", :onclick=>"dijit.byId('new_data_type_1').show();", :class => "icon icon-add", :onmouseover =>"this.style.cursor='hand'"}Data Type:  
    %br
    - data_types.all(:order => [:term.asc]).each do |data_type|
      -data_type_options <<[data_type.term]
    = f.select('data_type',  options_for_select(data_type_options), :class => "data_type")
    =clear_break
    =clear_break
    %label{:id => "quality_control_label", :onclick=>"dijit.byId('new_quality_control_level').show();", :class => "icon icon-add", :onmouseover =>"this.style.cursor='hand'"}QA/QC Level: 
    %br
    %div{:dojoType=>"dijit.Tooltip", :connectId=> "quality_control_label", :position=>"above"}
      This is the initial QA/QC classification that should be applied to this incoming data.<br>
      For example: <i>is this value derived from other measurements or is it a raw data measurement.</i>

    -quality_control_level_options = Array.new
    -quality_control_levels.all(:order => [:quality_control_level_code.asc]).each do |qa|
      -quality_control_level_options <<[qa.quality_control_level_code+":"+qa.definition, qa.quality_control_level_code]
    = f.select('quality_control',  options_for_select(quality_control_level_options))
    =clear_break
  

    %h3 
      Optional(Advanced Meta Data)
      %span{:id=>"simple_toggle", :onclick=>"toggle_optional();"}+
    #optional{:style=>"display:none;"}
      #two-bins
        %table
          %tr
            %td
              %b Location Support:
              #spatial
                %label{:id => "spatial", :onclick=>"dijit.byId('new_spatial_offset_type').show();", :class => "icon icon-add", :onmouseover =>"this.style.cursor='hand'"}Spatial Offset Type: 
                -sot_options = Array.new
                -sot_options << ["None", ""]
                -spatial_offset_types.all(:order => [:type]).each do |sot|
                  -sot_options << [sot.type, sot.type]
                = f.select :spatial_offset_type, options_for_select(sot_options, "")
                =clear_break
                %label Offset Value: 
                = f.text_field :spatial_offset_value, :value=>"0.0"
                =clear_break
                %label Offset Units:
                -offset_unit_options = Array.new
                - offset_units.all(:order => [:units_name]).each do |unit|
                  -offset_unit_options << [unit.units_name, unit.id.to_s]
                = f.select :spatial_units_id, options_for_select(offset_unit_options, 52)
            %td
              #bin-two
                %b Time Related Meta-Data:
                #optional
                  %label Collected at a Regularly Interval?: 
                  = f.select :is_regular, options_for_select({"true"=>"true", "false"=>"false"}, false)
                  =clear_break
                  %label Interval:(0 indicates instantaneous time measurement) 
                  = f.text_field :time_support, :value => 0, :size=>5
                  =clear_break
                  %label Units:
                  -time_unit_options = Array.new
                  - time_units.all(:order => [:units_name]).each do |unit|
                    -time_unit_options << [unit.units_name, unit.id.to_s]
                  = f.select :time_units_id, options_for_select(time_unit_options, 103)
                  =clear_break
      %b Data Collection and Analysis:
      #data-collection
        %label No Data Value: 
        = f.text_field :no_data_value, :class=>"no_data_value"
        =clear_break
        %label{:id => "field_method_label", :onclick=>"dijit.byId('new_field_method1').show();", :class => "icon icon-add", :onmouseover =>"this.style.cursor='hand'"}Field Collection Method: 
        %div{:dojoType=>"dijit.Tooltip", :connectId=> "field_method", :position=>"above"}
          This is the type of data that should be measured by this variable.<br>
          For example: <i>is this data that is colled from a logger.</i>
        -field_method_options = Array.new
        -field_method_options << ["None", ""]
        -field_methods.all(:order => [:method_name.asc]).each do |method|
          -field_method_options <<[method.method_name, method.id.to_s]
        = f.select('field_method_id',  options_for_select(field_method_options,""))
        =clear_break
        %label{:id => "lab_label", :onclick=>"dijit.byId('new_lab').show();", :class => "icon icon-add", :onmouseover =>"this.style.cursor='hand'"}Lab: 
        %div{:dojoType=>"dijit.Tooltip", :connectId=> "lab", :position=>"above"}
          This is the lab that is associated with the lab method and the data.</i>
        -lab_options = Array.new
        -lab_options<< ["None", ""]
        -labs.all(:order => [:lab_name.asc]).each do |lab|
          -lab_options <<[lab.lab_name, lab.id.to_s]
        = f.select('lab_id',  options_for_select(lab_options, ""))
        =clear_break
        %label{:id => "lab_method_label", :onclick=>"dijit.byId('new_lab_method1').show();", :class => "icon icon-add", :onmouseover =>"this.style.cursor='hand'"}Lab Method: 
        %div{:dojoType=>"dijit.Tooltip", :connectId=> "lab_method", :position=>"above"}
          This is the type of data that should be measured by this variable.<br>
          For example: <i>is this data that is colled from a logger.</i>
        -lab_method_options = Array.new
        -lab_method_options<< ["None", ""]
        -lab_methods.all(:order => [:lab_method_name.asc]).each do |method|
          -lab_method_options <<[method.lab_method_name, method.id.to_s]
        = f.select('lab_method_id',  options_for_select(lab_method_options,""))
        =clear_break
        %label Method Detection Limit: 
        = f.text_field :detection_limit, :class=>"detection_limit"
        =clear_break
    =clear_break
    %button{:id=> 'new_variable_button',:dojoType=>"dijit.form.Button", :title=>'Create', :onClick=>"createVariable();"}
      Create Variable


